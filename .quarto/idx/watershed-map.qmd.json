{"title":"Watershed Maps","markdown":{"yaml":{"title":"Watershed Maps","execute":{"echo":true},"format":{"html":{"toc":true,"toc-location":"right","highlight-style":"pygments","page-layout":"article"}},"editor_options":{"markdown":{"wrap":60}}},"headingText":"1. Declare AOI & Projection","containsRefs":false,"markdown":"\n\n```{r setup}\n#| warning: false\n#| message: false\n#| include: false\n#| echo: false\n#| comment: NA\n\n#install.packages(\"easypackages\")\neasypackages::packages(\n  \"bslib\",\n  \"cli\", \"cols4all\", \"covr\", \"cowplot\",\n  \"dendextend\", \"digest\", \"DiagrammeR\", \n  \"dtwclust\", \"downlit\",\n  \"exactextractr\", \"elevatr\",\n  \"FNN\", \"future\", \"flowdem\",\n  \"gdalUtilities\", \"geojsonsf\", \"geos\", \"geodata\", \n  \"ggplot2\", \"ggstats\",\"ggspatial\", \"ggmap\", \n  \"ggplotify\", \"ggpubr\", \"ggrepel\", \"giscoR\",\n  \"hdf5r\", \"httr\", \"httr2\", \"htmltools\",\n  \"jsonlite\",\n  \"leafem\", \"leaflet.providers\", \"libgeos\", \n  \"luz\", \"lwgeom\", \"leaflet\", \"leafgl\",\n  \"mapedit\", \"mapview\", \"maptiles\", \"methods\", \"mgcv\",\n  \"ncdf4\", \"nnet\",\n  \"openxlsx\",\n  \"parallel\", \"plotly\", \"proj4\", \"PROJ\", \"progress\",\n  \"randomForest\", \"rasterVis\", \"raster\",\n  \"rayshader\", \"rayvertex\", \n  \"RColorBrewer\", \"rgl\", \"rsconnect\", \n  \"RStoolbox\", \"rts\", \"rgrass\",\n  \"s2\", \"sf\", \"scales\", \"spdep\", \"stars\", \n  \"stringr\", \"supercells\",\n  \"terra\", \"terrainr\", \"testthat\", \"\n  tidyverse\", \"tidyterra\", \"tools\",\n  \"tmap\", \"tmaptools\", \"terrainr\",\n  \"whitebox\", \"xgboost\", \n  prompt = F\n  )\n\nwhitebox::install_whitebox()\nwhitebox::wbt_init()\nknitr::opts_chunk$set(\n  echo = TRUE, message = FALSE, warning = FALSE,\n  error = FALSE, comment = NA, tidy.opts = list(width.cutoff = 6)\n)\noptions(htmltools.dir.version = FALSE, htmltools.preserve.raw = FALSE)\nmapviewOptions(fgb = FALSE)\nsf::sf_use_s2(use_s2 = FALSE)\n```\n\n```{css, echo=FALSE, class.source = 'foldable'}\ndiv.column {\n    display: inline-block;\n    vertical-align: top;\n    width: 50%;\n}\n\n#TOC::before {\n  content: \"\";\n  display: block;\n  height:200px;\n  width: 200px;\n  background-image: url('https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png');\n  background-size: contain;\n  background-position: 50% 50%;\n  padding-top: 80px !important;\n  background-repeat: no-repeat;\n}\n```\n\n-   Declare AOI & Projection\n-   Process DEM Flow\n-   Identify Pour Point\n-   Delineate Drainage\n-   Render 3D Map\n-   Save output\n\n\n```{r pop-aoi}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n\ncrs_master = sf::st_crs(\"epsg:3857\")\n\ncountry = giscoR::gisco_get_countries(\n  country = \"Malawi\", resolution = \"3\") |>\n  sf::st_cast() |> sf::st_transform(crs_master)\n\nlake  = sf::st_read(\"./assets/inputs/lakes_site.shp\", quiet=T) |>\n  sf::st_cast() |> sf::st_transform(crs_master)\n\nbbox = lake |>\n  sf::st_buffer(dist = 60000) |> \n  sf::st_bbox() |>\n  sf::st_as_sfc() |>\n  sf::st_sf()\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(country) + tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(bbox) + tmap::tm_borders(lwd = 2, col = \"orange\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(lwd = 2, col = \"blue\") +\n  tmap::tm_basemap(\"Esri.WorldImagery\")\n```\n\n##### Figure 1: Interactive map of area of interest polygons (AOI)\n\n## 2. Process DEM\n\n```{r watershed-dem}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n\n# z = 12: 1-Arc Second Resolution\n# z = 11: 3-Arc Second Resolution\n# z = 10: 5-Arc Second Resolution\ndem = elevatr::get_elev_raster(bbox, z=10, clip=\"locations\") |> terra::rast() \nnames(dem) = \"elevation\" \n\ndem_100m  = stars::st_warp(\n  stars::st_as_stars(dem), \n  cellsize=100, crs=sf::st_crs(crs_master)) |>\n  terra::rast()\n\n# Apply breaching & filling to depressions & flats\ndem_breach = flowdem::breach(dem_100m) \ndem_fill   = flowdem::fill(dem_breach, epsilon=T)  \n#flowdem::fill_basins() # coastal basins\n\n# Calculate flow direction & flow accumulation\ndem_dir =  flowdem::dirs(dem_fill, mode=\"d8\")\ndem_acc =  flowdem::dirs(dem_dir, mode=\"d8\")\n\n# Delineate watershed drainage area\nwatershed = flowdem::watershed(dem_dir, lake) |>\n  terra::as.polygons(dissolve = TRUE) |>\n  sf::st_as_sf()\n\n# Save elevation models to local directory\n#terra::writeRaster(dem_100m,  \"./assets/TIF/dem_chilwa_00_raw.tif\",overwrite=T)\n#terra::writeRaster(dem_breach, \"./assets/TIF/dem_chilwa_01_breached.tif\",overwrite=T)\n#terra::writeRaster(dem_fill, \"./assets/TIF/dem_chilwa_02_filled.tif\",overwrite=T)\n#terra::writeRaster(dem_dir, \"./assets/TIF/dem_chilwa_03_flow_direction.tif\",overwrite=T)\n#terra::writeRaster(dem_acc, \"./assets/TIF/dem_chilwa_04_flow_accumulation.tif\",overwrite=T)\n#sf::st_write(watershed, \"./assets/SHP/watershed_chilwa_05_flowdem.shp\", delete_dsn=T)\n\n# Visualize effects of hydrographic conditioning\ndem_breach_diff <- dem_100m - dem_breach\ndem_breach_diff[dem_breach_diff == 0] <- NA\ndem_fill_diff <- dem_100m - dem_fill\ndem_fill_diff[dem_fill_diff == 0] <- NA\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(dem_breach_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(dem_fill_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\n\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n```\n\n```{r watershed-dem-hidden}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n# Import outputs derived in chunk above\ndem_100m   = terra::rast(\"./assets/TIF/dem_chilwa_00_raw.tif\")\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_01_breached.tif\")\ndem_fill   = terra::rast(\"./assets/TIF/dem_chilwa_02_filled.tif\")\n\n# Visualize effects of hydrographic conditioning\ndem_breach_diff <- dem_100m - dem_breach\ndem_breach_diff[dem_breach_diff == 0] <- NA\ndem_fill_diff <- dem_100m - dem_fill\ndem_fill_diff[dem_fill_diff == 0] <- NA\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(dem_breach_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(dem_fill_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\n\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n```\n\n##### Figure 2: Static maps of hydr conditioned and unconditioned digital elevation models.\n\n```{r}\n#| eval: false\n\nwhitebox::wbt_extract_streams(\n  flow_accum =  \"./assets/TIF/dem_chilwa_flacc_100m.tif\",\n  threshold = 100, # 100 cells for 1 km2\n  output = \"./assets/TIF/dem_network_1km2.tif\",\n  zero_background = T\n  )\n\ndem_dir_5arc = dem_condt_5arc |> flowdem::dirs(mode=\"d8\")\ndem_acc_7arc = dem_dir_7arc |> flowdem::accum(mode=\"d8\")\ndem_acc_5arc = dem_dir_5arc |> flowdem::accum(mode=\"d8\")\nterra::writeRaster(dem, \"./assets/TIF/dem_3arc_chilwa.tif\")\n```\n\n##### Figure 2: Interactive maps of hydrographically conditioned and unconditioned digital elevation models.\n\n```{r}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n\nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |>\n  st_cast() |> st_transform(crs_master)\naoi_country <- giscoR::gisco_get_countries(country = \"Malawi\", resolution = \"3\") |>\n  st_cast() |>\n  st_transform(crs_master)\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 2, col = \"red\")\n\ntmap::tm_shape(dem_site) + tmap::tm_raster(palette = \"Greens\") +\n  tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-inputs-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n#\n## 2. Download hydro data\n\n\n#url_rivers <- \"https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_shp.zip\"\n#url_lakes <- \"https://data.hydrosheds.org/file/hydrolakes/HydroLAKES_polys_v10_shp.zip\"\n#url_watersheds <- \"https://data.hydrosheds.org/file/hydrobasins/customized_with_lakes/hybas_lake_af_lev01-12_v1c.zip\"\n# download.file(url = url, path = getwd(), destfile = file_name)\n\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \nlakes    = terra::vect(\"./assets/inputs/hydro/HydroLAKES_polys_v10.shp\") \nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nwatershed_country = terra::crop(watershed, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nwatershed_site = terra::crop(watershed, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\n# save for faster runtime\nsf::st_write(rivers_country, \"./assets/inputs/rivers_country.shp\")\nsf::st_write(rivers_site, \"./assets/inputs/rivers_site.shp\")\nsf::st_write(lakes_country, \"./assets/inputs/lakes_country.shp\")\nsf::st_write(lakes_site, \"./assets/inputs/lakes_site.shp\")\nsf::st_write(watershed_country, \"./assets/inputs/watershed_country.shp\")\nsf::st_write(watershed_site, \"./assets/inputs/watershed_site.shp\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-extracted-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n\nrivers_country = sf::st_read(\"./assets/inputs/rivers_country.shp\", quiet=T) |> st_cast(\"LINESTRING\")\nrivers_site    = sf::st_read(\"./assets/inputs/rivers_site.shp\", quiet=T)    |> st_cast(\"LINESTRING\")\nlakes_country  = sf::st_read(\"./assets/inputs/lakes_country.shp\", quiet=T)  |> st_cast(\"POLYGON\")\nlakes_site     = sf::st_read(\"./assets/inputs/lakes_site.shp\", quiet=T)     |> st_cast(\"POLYGON\")\nwatershed_site = sf::st_read(\"./assets/inputs/watershed_site.shp\", quiet=T) |> st_cast(\"POLYGON\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n##### Figure 2: Interactive map showing extracted hydrographic layers\n```\n\n## 2. Process DEM\n\n**Note:** More efficient conditioning algorithms available\nwith `RichDEM` library \\[\\^1\\]\n\n```{r}\n#| comment: NA\n#| warning: false\n#| message: false\n#| eval: false\n#| echo: true\ncrs_master = \"EPSG:3005\"\nisland_shoreline = sf::st_read(\"./assets/SHP/island_shoreline.shp\", quiet=T)\n\n# z = 12: 1-Arc Second \n# z = 11: 3-Arc Second \n# z = 10: 5-Arc Second \ndem_7arc = elevatr::get_elev_raster(island_shoreline, z=9,clip=\"locations\")|>\n  terra::rast()|> \n  terra::crop(terra::vect(island_shoreline)) |>  \n  terra::project(crs_master)\n\n#Process DEM by breaching & filling depressions & flats\ndem_condt_7arc  = dem_7arc |> \n  flowdem::breach() |>\n  flowdem::fill(epsilon=T) \n  #flowdem::fill_basins() # costal basins\n\n# Calculate flow direction & accumulation\ndem_dir_7arc = dem_condt_7arc |> flowdem::dirs(mode=\"d8\")\ndem_dir_5arc = dem_condt_5arc |> flowdem::dirs(mode=\"d8\")\ndem_acc_7arc = dem_dir_7arc |> flowdem::accum(mode=\"d8\")\ndem_acc_5arc = dem_dir_5arc |> flowdem::accum(mode=\"d8\")\n\n#tmap::tm_shape(dem) + \n#  tmap::tm_raster(\n#    col.scale = tm_scale_continuous(values = \"viridis\"),\n#    col.legend = tm_legend(title = \"Elevation (m)\", reverse = T)) + \n#  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +\n#  tmap::tm_scalebar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) + \n#  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\")+\n#  tmap::tm_basemap(\"Esri.WorldImagery\")\nwriteRaster(dem_condt_7arc, \"./assets/TIF/dem_7arc_condt.tif\", overwrite=T)\nwriteRaster(dem_condt_5arc, \"./assets/TIF/dem_5arc_condt.tif\", overwrite=T)\nwriteRaster(dem_dir_7arc, \"./assets/TIF/dem_7arc_dir.tif\", overwrite=T)\nwriteRaster(dem_dir_5arc, \"./assets/TIF/dem_5arc_dir.tif\", overwrite=T)\nwriteRaster(dem_acc_7arc, \"./assets/TIF/dem_7arc_acc.tif\", overwrite=T)\nwriteRaster(dem_acc_5arc, \"./assets/TIF/dem_5arc_acc.tif\", overwrite=T)\n```\n\n## 4. Build 3D map\n\n```{r watershed-render}\n#| warning: false\n#| message: false\n#| echo: true\n#| eval: false\n#| comment: NA\n\nrivers_strahler = rivers_site |>\n  dplyr::mutate(\n    width = as.numeric(\n      ORD_FLOW\n    ),\n    width = dplyr::case_when(\n      width == 3 ~ 16,\n      width == 4 ~ 14,\n      width == 5 ~ 12,\n      width == 6 ~ 10,\n      width == 7 ~ 6,\n      TRUE ~ 0\n    )\n  ) |>\n  sf::st_as_sf() |>\n  sf::st_transform(crs = \"epsg:4326\")\n\nh <- nrow(dem_site)\nw <- ncol(dem_site)\n\ndem_matrix = rayshader::raster_to_matrix(dem_site)\n\ndem_matrix |>\n  rayshader:: height_shade() |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = rivers_strahler,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\",\n      linewidth  = rivers_strahler$width,\n      data_column_width = \"width\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = lakes_site,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::plot_3d(\n    dem_matrix,\n    zscale       = 14,\n    solid        = T,\n    shadow       = T,\n    shadow_darkness = 2,\n    background   = \"white\",\n    windowsize   = c(600, 600),\n    zoom         = 0.6,\n    phi          = 40,\n    theta        = 0 \n  )\n```\n\n## 5. Render 3D map\n\n```{r watershed-save}\n#| eval: false\n\nrayshader::render_highquality(\n  preview        = T,\n  light          = F,\n  lightdirection = c(135, 45),\n  lightcolor = c(\"white\"),\n  lightaltitude = 25,\n  ambient_light = 0.1,\n  rotate_env     = 0.4,\n  intensity_env  = 0.85,\n  interactive    = F,\n  parallel       = T,\n  width          = w,\n  height         = h,\n  backgroundhigh=\"#FFFFFF\",\n  backgroundlow=\"#FFFFFF\"\n  )\n```\n\n![Figure 4: Three-dimensional map of Lake Chilwa\nwatershed](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png)\n\n```{r session-info}\n#| eval: true\ndevtools::session_info()\n```\n","srcMarkdownNoYaml":"\n\n```{r setup}\n#| warning: false\n#| message: false\n#| include: false\n#| echo: false\n#| comment: NA\n\n#install.packages(\"easypackages\")\neasypackages::packages(\n  \"bslib\",\n  \"cli\", \"cols4all\", \"covr\", \"cowplot\",\n  \"dendextend\", \"digest\", \"DiagrammeR\", \n  \"dtwclust\", \"downlit\",\n  \"exactextractr\", \"elevatr\",\n  \"FNN\", \"future\", \"flowdem\",\n  \"gdalUtilities\", \"geojsonsf\", \"geos\", \"geodata\", \n  \"ggplot2\", \"ggstats\",\"ggspatial\", \"ggmap\", \n  \"ggplotify\", \"ggpubr\", \"ggrepel\", \"giscoR\",\n  \"hdf5r\", \"httr\", \"httr2\", \"htmltools\",\n  \"jsonlite\",\n  \"leafem\", \"leaflet.providers\", \"libgeos\", \n  \"luz\", \"lwgeom\", \"leaflet\", \"leafgl\",\n  \"mapedit\", \"mapview\", \"maptiles\", \"methods\", \"mgcv\",\n  \"ncdf4\", \"nnet\",\n  \"openxlsx\",\n  \"parallel\", \"plotly\", \"proj4\", \"PROJ\", \"progress\",\n  \"randomForest\", \"rasterVis\", \"raster\",\n  \"rayshader\", \"rayvertex\", \n  \"RColorBrewer\", \"rgl\", \"rsconnect\", \n  \"RStoolbox\", \"rts\", \"rgrass\",\n  \"s2\", \"sf\", \"scales\", \"spdep\", \"stars\", \n  \"stringr\", \"supercells\",\n  \"terra\", \"terrainr\", \"testthat\", \"\n  tidyverse\", \"tidyterra\", \"tools\",\n  \"tmap\", \"tmaptools\", \"terrainr\",\n  \"whitebox\", \"xgboost\", \n  prompt = F\n  )\n\nwhitebox::install_whitebox()\nwhitebox::wbt_init()\nknitr::opts_chunk$set(\n  echo = TRUE, message = FALSE, warning = FALSE,\n  error = FALSE, comment = NA, tidy.opts = list(width.cutoff = 6)\n)\noptions(htmltools.dir.version = FALSE, htmltools.preserve.raw = FALSE)\nmapviewOptions(fgb = FALSE)\nsf::sf_use_s2(use_s2 = FALSE)\n```\n\n```{css, echo=FALSE, class.source = 'foldable'}\ndiv.column {\n    display: inline-block;\n    vertical-align: top;\n    width: 50%;\n}\n\n#TOC::before {\n  content: \"\";\n  display: block;\n  height:200px;\n  width: 200px;\n  background-image: url('https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png');\n  background-size: contain;\n  background-position: 50% 50%;\n  padding-top: 80px !important;\n  background-repeat: no-repeat;\n}\n```\n\n-   Declare AOI & Projection\n-   Process DEM Flow\n-   Identify Pour Point\n-   Delineate Drainage\n-   Render 3D Map\n-   Save output\n\n## 1. Declare AOI & Projection\n\n```{r pop-aoi}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n\ncrs_master = sf::st_crs(\"epsg:3857\")\n\ncountry = giscoR::gisco_get_countries(\n  country = \"Malawi\", resolution = \"3\") |>\n  sf::st_cast() |> sf::st_transform(crs_master)\n\nlake  = sf::st_read(\"./assets/inputs/lakes_site.shp\", quiet=T) |>\n  sf::st_cast() |> sf::st_transform(crs_master)\n\nbbox = lake |>\n  sf::st_buffer(dist = 60000) |> \n  sf::st_bbox() |>\n  sf::st_as_sfc() |>\n  sf::st_sf()\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(country) + tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(bbox) + tmap::tm_borders(lwd = 2, col = \"orange\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(lwd = 2, col = \"blue\") +\n  tmap::tm_basemap(\"Esri.WorldImagery\")\n```\n\n##### Figure 1: Interactive map of area of interest polygons (AOI)\n\n## 2. Process DEM\n\n```{r watershed-dem}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n\n# z = 12: 1-Arc Second Resolution\n# z = 11: 3-Arc Second Resolution\n# z = 10: 5-Arc Second Resolution\ndem = elevatr::get_elev_raster(bbox, z=10, clip=\"locations\") |> terra::rast() \nnames(dem) = \"elevation\" \n\ndem_100m  = stars::st_warp(\n  stars::st_as_stars(dem), \n  cellsize=100, crs=sf::st_crs(crs_master)) |>\n  terra::rast()\n\n# Apply breaching & filling to depressions & flats\ndem_breach = flowdem::breach(dem_100m) \ndem_fill   = flowdem::fill(dem_breach, epsilon=T)  \n#flowdem::fill_basins() # coastal basins\n\n# Calculate flow direction & flow accumulation\ndem_dir =  flowdem::dirs(dem_fill, mode=\"d8\")\ndem_acc =  flowdem::dirs(dem_dir, mode=\"d8\")\n\n# Delineate watershed drainage area\nwatershed = flowdem::watershed(dem_dir, lake) |>\n  terra::as.polygons(dissolve = TRUE) |>\n  sf::st_as_sf()\n\n# Save elevation models to local directory\n#terra::writeRaster(dem_100m,  \"./assets/TIF/dem_chilwa_00_raw.tif\",overwrite=T)\n#terra::writeRaster(dem_breach, \"./assets/TIF/dem_chilwa_01_breached.tif\",overwrite=T)\n#terra::writeRaster(dem_fill, \"./assets/TIF/dem_chilwa_02_filled.tif\",overwrite=T)\n#terra::writeRaster(dem_dir, \"./assets/TIF/dem_chilwa_03_flow_direction.tif\",overwrite=T)\n#terra::writeRaster(dem_acc, \"./assets/TIF/dem_chilwa_04_flow_accumulation.tif\",overwrite=T)\n#sf::st_write(watershed, \"./assets/SHP/watershed_chilwa_05_flowdem.shp\", delete_dsn=T)\n\n# Visualize effects of hydrographic conditioning\ndem_breach_diff <- dem_100m - dem_breach\ndem_breach_diff[dem_breach_diff == 0] <- NA\ndem_fill_diff <- dem_100m - dem_fill\ndem_fill_diff[dem_fill_diff == 0] <- NA\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(dem_breach_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(dem_fill_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\n\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n```\n\n```{r watershed-dem-hidden}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n# Import outputs derived in chunk above\ndem_100m   = terra::rast(\"./assets/TIF/dem_chilwa_00_raw.tif\")\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_01_breached.tif\")\ndem_fill   = terra::rast(\"./assets/TIF/dem_chilwa_02_filled.tif\")\n\n# Visualize effects of hydrographic conditioning\ndem_breach_diff <- dem_100m - dem_breach\ndem_breach_diff[dem_breach_diff == 0] <- NA\ndem_fill_diff <- dem_100m - dem_fill\ndem_fill_diff[dem_fill_diff == 0] <- NA\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(dem_breach_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(dem_fill_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\n\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n```\n\n##### Figure 2: Static maps of hydr conditioned and unconditioned digital elevation models.\n\n```{r}\n#| eval: false\n\nwhitebox::wbt_extract_streams(\n  flow_accum =  \"./assets/TIF/dem_chilwa_flacc_100m.tif\",\n  threshold = 100, # 100 cells for 1 km2\n  output = \"./assets/TIF/dem_network_1km2.tif\",\n  zero_background = T\n  )\n\ndem_dir_5arc = dem_condt_5arc |> flowdem::dirs(mode=\"d8\")\ndem_acc_7arc = dem_dir_7arc |> flowdem::accum(mode=\"d8\")\ndem_acc_5arc = dem_dir_5arc |> flowdem::accum(mode=\"d8\")\nterra::writeRaster(dem, \"./assets/TIF/dem_3arc_chilwa.tif\")\n```\n\n##### Figure 2: Interactive maps of hydrographically conditioned and unconditioned digital elevation models.\n\n```{r}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n\nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |>\n  st_cast() |> st_transform(crs_master)\naoi_country <- giscoR::gisco_get_countries(country = \"Malawi\", resolution = \"3\") |>\n  st_cast() |>\n  st_transform(crs_master)\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 2, col = \"red\")\n\ntmap::tm_shape(dem_site) + tmap::tm_raster(palette = \"Greens\") +\n  tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-inputs-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n#\n## 2. Download hydro data\n\n\n#url_rivers <- \"https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_shp.zip\"\n#url_lakes <- \"https://data.hydrosheds.org/file/hydrolakes/HydroLAKES_polys_v10_shp.zip\"\n#url_watersheds <- \"https://data.hydrosheds.org/file/hydrobasins/customized_with_lakes/hybas_lake_af_lev01-12_v1c.zip\"\n# download.file(url = url, path = getwd(), destfile = file_name)\n\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \nlakes    = terra::vect(\"./assets/inputs/hydro/HydroLAKES_polys_v10.shp\") \nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nwatershed_country = terra::crop(watershed, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nwatershed_site = terra::crop(watershed, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\n# save for faster runtime\nsf::st_write(rivers_country, \"./assets/inputs/rivers_country.shp\")\nsf::st_write(rivers_site, \"./assets/inputs/rivers_site.shp\")\nsf::st_write(lakes_country, \"./assets/inputs/lakes_country.shp\")\nsf::st_write(lakes_site, \"./assets/inputs/lakes_site.shp\")\nsf::st_write(watershed_country, \"./assets/inputs/watershed_country.shp\")\nsf::st_write(watershed_site, \"./assets/inputs/watershed_site.shp\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-extracted-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n\nrivers_country = sf::st_read(\"./assets/inputs/rivers_country.shp\", quiet=T) |> st_cast(\"LINESTRING\")\nrivers_site    = sf::st_read(\"./assets/inputs/rivers_site.shp\", quiet=T)    |> st_cast(\"LINESTRING\")\nlakes_country  = sf::st_read(\"./assets/inputs/lakes_country.shp\", quiet=T)  |> st_cast(\"POLYGON\")\nlakes_site     = sf::st_read(\"./assets/inputs/lakes_site.shp\", quiet=T)     |> st_cast(\"POLYGON\")\nwatershed_site = sf::st_read(\"./assets/inputs/watershed_site.shp\", quiet=T) |> st_cast(\"POLYGON\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n##### Figure 2: Interactive map showing extracted hydrographic layers\n```\n\n## 2. Process DEM\n\n**Note:** More efficient conditioning algorithms available\nwith `RichDEM` library \\[\\^1\\]\n\n```{r}\n#| comment: NA\n#| warning: false\n#| message: false\n#| eval: false\n#| echo: true\ncrs_master = \"EPSG:3005\"\nisland_shoreline = sf::st_read(\"./assets/SHP/island_shoreline.shp\", quiet=T)\n\n# z = 12: 1-Arc Second \n# z = 11: 3-Arc Second \n# z = 10: 5-Arc Second \ndem_7arc = elevatr::get_elev_raster(island_shoreline, z=9,clip=\"locations\")|>\n  terra::rast()|> \n  terra::crop(terra::vect(island_shoreline)) |>  \n  terra::project(crs_master)\n\n#Process DEM by breaching & filling depressions & flats\ndem_condt_7arc  = dem_7arc |> \n  flowdem::breach() |>\n  flowdem::fill(epsilon=T) \n  #flowdem::fill_basins() # costal basins\n\n# Calculate flow direction & accumulation\ndem_dir_7arc = dem_condt_7arc |> flowdem::dirs(mode=\"d8\")\ndem_dir_5arc = dem_condt_5arc |> flowdem::dirs(mode=\"d8\")\ndem_acc_7arc = dem_dir_7arc |> flowdem::accum(mode=\"d8\")\ndem_acc_5arc = dem_dir_5arc |> flowdem::accum(mode=\"d8\")\n\n#tmap::tm_shape(dem) + \n#  tmap::tm_raster(\n#    col.scale = tm_scale_continuous(values = \"viridis\"),\n#    col.legend = tm_legend(title = \"Elevation (m)\", reverse = T)) + \n#  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +\n#  tmap::tm_scalebar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) + \n#  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\")+\n#  tmap::tm_basemap(\"Esri.WorldImagery\")\nwriteRaster(dem_condt_7arc, \"./assets/TIF/dem_7arc_condt.tif\", overwrite=T)\nwriteRaster(dem_condt_5arc, \"./assets/TIF/dem_5arc_condt.tif\", overwrite=T)\nwriteRaster(dem_dir_7arc, \"./assets/TIF/dem_7arc_dir.tif\", overwrite=T)\nwriteRaster(dem_dir_5arc, \"./assets/TIF/dem_5arc_dir.tif\", overwrite=T)\nwriteRaster(dem_acc_7arc, \"./assets/TIF/dem_7arc_acc.tif\", overwrite=T)\nwriteRaster(dem_acc_5arc, \"./assets/TIF/dem_5arc_acc.tif\", overwrite=T)\n```\n\n## 4. Build 3D map\n\n```{r watershed-render}\n#| warning: false\n#| message: false\n#| echo: true\n#| eval: false\n#| comment: NA\n\nrivers_strahler = rivers_site |>\n  dplyr::mutate(\n    width = as.numeric(\n      ORD_FLOW\n    ),\n    width = dplyr::case_when(\n      width == 3 ~ 16,\n      width == 4 ~ 14,\n      width == 5 ~ 12,\n      width == 6 ~ 10,\n      width == 7 ~ 6,\n      TRUE ~ 0\n    )\n  ) |>\n  sf::st_as_sf() |>\n  sf::st_transform(crs = \"epsg:4326\")\n\nh <- nrow(dem_site)\nw <- ncol(dem_site)\n\ndem_matrix = rayshader::raster_to_matrix(dem_site)\n\ndem_matrix |>\n  rayshader:: height_shade() |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = rivers_strahler,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\",\n      linewidth  = rivers_strahler$width,\n      data_column_width = \"width\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = lakes_site,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::plot_3d(\n    dem_matrix,\n    zscale       = 14,\n    solid        = T,\n    shadow       = T,\n    shadow_darkness = 2,\n    background   = \"white\",\n    windowsize   = c(600, 600),\n    zoom         = 0.6,\n    phi          = 40,\n    theta        = 0 \n  )\n```\n\n## 5. Render 3D map\n\n```{r watershed-save}\n#| eval: false\n\nrayshader::render_highquality(\n  preview        = T,\n  light          = F,\n  lightdirection = c(135, 45),\n  lightcolor = c(\"white\"),\n  lightaltitude = 25,\n  ambient_light = 0.1,\n  rotate_env     = 0.4,\n  intensity_env  = 0.85,\n  interactive    = F,\n  parallel       = T,\n  width          = w,\n  height         = h,\n  backgroundhigh=\"#FFFFFF\",\n  backgroundlow=\"#FFFFFF\"\n  )\n```\n\n![Figure 4: Three-dimensional map of Lake Chilwa\nwatershed](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png)\n\n```{r session-info}\n#| eval: true\ndevtools::session_info()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":8,"fig-height":6,"fig-format":"png","fig-dpi":150,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"highlight-style":"pygments","output-file":"watershed-map.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","theme":["cosmo","styles.scss"],"title":"Watershed Maps","editor_options":{"markdown":{"wrap":60}},"toc-location":"right","page-layout":"article"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}