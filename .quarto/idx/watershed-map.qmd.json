{"title":"Watershed Maps","markdown":{"yaml":{"title":"Watershed Maps","execute":{"echo":true},"format":{"html":{"toc":true,"toc-location":"right","toc-depth":4,"toc-expand":true,"highlight-style":"pygments","page-layout":"article"}},"editor_options":{"markdown":{"wrap":60}},"bibliography":"references.bib"},"headingText":"Environment Setup","containsRefs":false,"markdown":"\n\n\n```{r setup}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| comment: NA\npacman::p_load(\n  \"bslib\",\n  \"cli\", \"cols4all\", \"covr\", \"cowplot\",\n  \"dendextend\", \"digest\", \"DiagrammeR\", \n  \"dtwclust\", \"downlit\",\n  \"exactextractr\", \"elevatr\",\n  \"FNN\", \"future\", \"flowdem\",\n  \"gdalUtilities\", \"geojsonsf\", \"geos\", \"geodata\", \n  \"ggplot2\", \"ggstats\",\"ggspatial\", \"ggmap\", \n  \"ggplotify\", \"ggpubr\", \"ggrepel\", \"giscoR\",\n  \"hdf5r\", \"httr\", \"httr2\", \"htmltools\",\n  \"jsonlite\",\n  \"leafem\", \"leaflet.providers\", \"libgeos\", \n  \"luz\", \"lwgeom\", \"leaflet\", \"leafgl\",\n  \"mapedit\", \"mapview\", \"maptiles\", \n  \"methods\", \"mgcv\", \"MPI\",\n  \"ncdf4\", \"nnet\",\n  \"openxlsx\",\n  \"parallel\", \"plotly\", \"proj4\", \"PROJ\", \"progress\", \"purrr\",\n  \"randomForest\", \"rasterVis\", \"raster\", \n  \"rayshader\", \"rayvertex\", \n  \"RColorBrewer\", \"rgl\", \"rmapshaper\", \"rsconnect\", \n  \"RStoolbox\", \"rts\", \"rgrass\",\n  \"s2\", \"sf\", \"scales\", \"spdep\", \"stars\", \n  \"stringr\", \"supercells\",\n  \"terra\", \"terrainr\", \"testthat\", \"traudem\", \"taudem\", \n  \"tidyverse\", \"tidyterra\", \"tools\",\n  \"tmap\", \"tmaptools\", \"terrainr\",\n  \"whitebox\", \"xgboost\"\n  )\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| include: false\n#| error: false\n#| echo: false\n#| comment: NA\n\n# bleeding edge installs\n#remotes::install_github(\"lucarraro/traudem\", force=T)\n#pak::pkg_install(\"MPI\")\n#devtools::install_github(\"lucarraro/traudem\")\n#remotes::install_github(\"opengeos/whiteboxR\", build=F)\n#remotes::install_github(\"giswqs/whiteboxR\") \n#install.packages(\"easypackages\")\n\n\nknitr::opts_chunk$set(\n  echo = TRUE,\n  message = FALSE, \n  warning = FALSE,\n  error = FALSE, \n  comment = NA, \n  tidy.opts = list(width.cutoff = 60)\n  ) \n\noptions(\n  htmltools.dir.version = FALSE, \n  htmltools.preserve.raw = FALSE)\n\ntmap::tmap_options(component.autoscale=F,\n  max.raster = c(plot=9500000, view=10000000)\n  )\n\n# whitebox doesnt like working with files in memory\n# so we need to assign path to working directory \n# whitebox::install_whitebox() # install whitebox and GRASS libraries\nwhitebox::wbt_init() # activate whitebox library in current directory\nlist.files(\"/usr/local/taudem/\") # Check traudem.pkg installation\n# traudem::taudem_sitrep() # Check traudem dependencies\n# Ignore above message \"Can't find  `MoveOutletsToStrm`\"\n\n# ----- TauDEM d8 Check ---- #\n# all(sapply(d8, file.exists))\n# Expected result: [1] TRUE\n# all(file.exists(unlist(d8)))\n# Expected result: [1] TRUE\n# all(map_lgl(d8, file.exists))\n# Expected result: [1] TRUE\n# can_register_taudem()\n# Expected result: [1] TRUE\n# Whitebox loaded tools: `print(wbt_list_tools())`\n# Whitebox shortcuts : `print(wbt_help())`\n# Whitebox version : `print(wbt_version())`\n# Whitebox tool guide: `print(wbt_tool_help(\"lidar_info\"))`\\\n# Whitebox parameter guide: `print(wbt_tool_parameters(\"slope\"))`\nmapviewOptions(fgb = FALSE)\nsf::sf_use_s2(use_s2 = FALSE)\n```\n\n```{css, echo=FALSE, class.source = 'foldable'}\ndiv.column {\n    display: inline-block;\n    vertical-align: top;\n    width: 50%;\n}\n\n#TOC::before {\n  content: \"\";\n  display: block;\n  height:200px;\n  width: 200px;\n  background-image: url('https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png');\n  background-size: contain;\n  background-position: 50% 50%;\n  padding-top: 80px !important;\n  background-repeat: no-repeat;\n}\n```\n\n## 2.0 Overview\n\nThis analysis performs geomorphological processing of\ndigital elevation models (DEMs) to extract critical\nwatershed characteristics needed for hydrological modeling.\nWe implement two complementary workflows for watershed\ndelineation and hydraulic network analysis, comparing two\napproaches using `flowdem` [@flowdem] and `whitebox`\n[@whitebox] packages with `RichDEM` [@RichDEM], `GDAL 3.11`\n[@GDAL] and `r-spatial` [@terra; @sf; @stars] libraries.\n\n## 2.1 Declare AOIs\n\n```{r pop-aoi}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n\ncrs_master = sf::st_crs(\"EPSG:3857\")\ncountry = giscoR::gisco_get_countries(\n  country = \"Malawi\", resolution = \"3\") |>\n  sf::st_cast() |> sf::st_transform(crs_master)\nlake  = sf::st_read(\"./assets/inputs/lakes_site.shp\") |>\n  sf::st_cast() |> sf::st_transform(crs_master)\n\nbbox = lake |>\n  sf::st_buffer(dist = 60000) |> \n  sf::st_bbox() |>\n  sf::st_as_sfc() |>\n  sf::st_sf()\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(country) + tmap::tm_borders(lwd=1, col= \"green\") +\n  tmap::tm_shape(bbox) + tmap::tm_borders(lwd=2, col= \"orange\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(lwd=2, col= \"blue\") +\n  tmap::tm_basemap(\"Esri.WorldImagery\")\n```\n\n##### Figure 1: Interactive map of area of interest polygons (AOI)\n\n## 2.2 Download DEM\n\nWe acquired elevation data using the `elevatr` package\n[@elevatr] that accesses collections via Amazon Web Services\nTerrain Tiles and Open Topography Global DEM [API](#0) to\nglobal digital elevation models including SRTMGL3, SRTMGL1,\nAW3D30, and SRTM15Plus. More often than not, `OSM` zooming\nis applied. At lower latitudes, setting `zoom=11` returns a\ndata resolution of 3-arc-seconds (76m at 0°Lat), which we\nresample to a standardized 100m grid which also informs use\nof downstream metrics that are applied at scale during\nwatershed analysis. To limit dependency conflicts, the Web\nMercator projection (EPSG:3857) was assigned `crs_master`\nabove and applied below going forward.\n\n```{r watershed-dem}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# z = 12: 1-Arc Second Resolution\n# z = 11: 3-Arc Second Resolution\n# z = 10: 5-Arc Second Resolution\ndem = elevatr::get_elev_raster(bbox, z=10, clip=\"locations\") |> terra::rast() \nnames(dem) = \"elevation\" \n\ndem_100m  = stars::st_warp(\n  stars::st_as_stars(dem), \n  cellsize=100, crs=sf::st_crs(crs_master)) |>\n  terra::rast()\n```\n\n## 2.3 Process DEM\n\n### 2.3.1a `flowdem` Tools\n\nThe `flowdem` package [@flowdem] provides a streamlined R\ninterface to `RichDEM` library, offering computationally\nefficient implementations of depression breaching, filling,\nand flow routing operations. While the `WhiteboxTools`\nworkflow below (Section 2.3) provides more comprehensive\ncontrol over individual processing steps, the `flowdem`\napproach enables rapid exploratory analysis through\nintegrated functions that combine multiple operations. This\n\"quick and efficient\" methodology is particularly valuable\nfor initial watershed characterization and iterative\nparameter testing.\n\nWe present the `flowdem` workflow as a complementary\napproach demonstrating that multiple algorithmic\nimplementations can yield consistent watershed boundaries\nwhen applied to the same study system. Comparing outputs\nfrom both `flowdem` and `whitebox` packages also allows for\nvalidation of challenging data tasks such as endorheic basin\ndelineation.\n\n### 2.3.1b Hydraulic Conditioning\n\n`RichDEM`'s depression handling implements priority-flood\nalgorithms [@RichDEM; @barnes2014priority] that efficiently\nprocess large DEMs through optimized queue-based operations.\nThe `flowdem::breach()` function carves minimal-depth\nchannels through depressions, while `flowdem::fill()` with\nepsilon gradient (`epsilon = TRUE`) ensures continuous\ndownstream flow by adding infinitesimal increments to flat\nareas. This combined approach removes topological barriers\nto flow routing while preserving the computational\nefficiency advantages of the RichDEM implementation.\n\nThe epsilon filling parameter adds small elevation\nincrements (typically 10⁻⁶ to 10⁻⁴ m) to ensure strict\nmonotonic descent along flow paths, preventing ambiguous\nflow directions in perfectly flat terrain common to\nmarshland environments. This is varies slightly to the\n`WhiteboxTools` `flat_increment` parameter, though both\nachieve similar outcomes through slightly different\nnumerical implementations.\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# Apply breaching & filling to depressions & flats\ndem_breach = flowdem::breach(dem_100m) \ndem_fill   = flowdem::fill(dem_breach, epsilon=T) \n\n# Visualize hydraulic conditioning\ndem_breach_diff <- dem_100m - dem_breach\ndem_breach_diff[dem_breach_diff == 0] <- NA\ndem_fill_diff <- dem_100m - dem_fill\ndem_fill_diff[dem_fill_diff == 0] <- NA\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(dem_breach_diff) + tmap::tm_raster(col.scale=tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(dem_fill_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n\n# Save conditioned DEMs\nterra::writeRaster(dem_breach, overwrite = TRUE,\n  \"./assets/TIF/dem_chilwa_01_breached.tif\")\nterra::writeRaster(dem_fill, overwrite = TRUE,\n  \"./assets/TIF/dem_chilwa_02_filled.tif\")\n```\n\n![](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/_site/watershed-map_files/figure-html/watershed-dem-1.png){fig-align=\"center\"}\n\n### 2.3.1c Flow Accumulation\n\nFlow routing follows the D8 algorithm [@o1984extraction]\nimplemented through RichDEM's optimized structures. The\n`flowdem::dirs()` function calculates flow direction\npointers, which are then used as input to compute flow\naccumulation. This follows familiar two-step process of\nother workflows, but executes using a more memory-efficient\nfunction often useful when importing large raster and point\ncloud datasets.\n\nThe Flow accumulation values represent the number of\nupstream cells contributing flow to each location, identical\nin interpretation to WhiteboxTools outputs. At 100m\nresolution, each cell represents 0.01 km² (1 hectare) of\ncontributing area, enabling direct conversion between cell\ncounts and drainage area in km².\n\n```{r}\n#|warning: false\n#|message: false \n#|error: false \n#|eval: false \n#|echo: true \n#|comment: NA\n# Inputs\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_01_breached.tif\")\ndem_fill = terra::rast(\"./assets/TIF/dem_chilwa_02_filled.tif\")\n\n# D8 flow direction + accumulation from filled DEM\ndem_dir <- flowdem::dirs(dem_fill, mode = \"d8\") \ndem_acc <- flowdem::accum(dem_dir, mode = \"d8\")\n\n# Verify flow accumulation statistics\ncat(\"Flow accumulation summary (flowdem):\\n\")\ncat(\"Minimum:\", min(values(dem_acc), na.rm = TRUE),\"cells\\n\") \ncat(\"Median:\", median(values(dem_acc), na.rm =TRUE), \"cells\\n\") \ncat(\"Maximum:\", max(values(dem_acc), na.rm= TRUE), \"cells\\n\") \ncat(\"Max contributing area:\", round(max(values(\n  dem_acc), na.rm = TRUE) * 0.01, 1), \"km²\\n\")\n\nterra::writeRaster(dem_dir, overwrite=T,\n  \"./assets/TIF/dem_chilwa_03_flow_direction.tif\")\nterra::writeRaster(dem_acc, overwrite=T, \n  \"./assets/TIF/dem_chilwa_04_flow_accumulation.tif\")\n\n# Visual check\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n```\n\n### 2.3.1d Watershed Delineation\n\nThe `flowdem::watershed()` function identifies all cells\nthat drain to a specified feature, in this case, the Lake\nChilwa boundary polygon. This approach differs from\npour-point-based methods by using the entire lake perimeter\nas the drainage terminus, automatically capturing all flow\npaths converging on the water body. For endorheic systems\nwhere the terminal sink is spatially extensive (Lake Chilwa\nspans \\~60 km N-S), this polygon-based approach may be more\nrobust than single-point methods, as it captures multiple\nconvergent flow paths around the lake's perimeter.\n\nThe resulting watershed polygon represents the complete\ncatchment area draining to Lake Chilwa through surface flow\npathways identified by the D8 algorithm. Post-processing\nconverts the raster watershed output to vector format for\nintegration with other spatial datasets and area\ncalculations.\n\n```{r watershed-dem-hidden}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n# Inputs\ndem_dir = terra::rast(\"./assets/TIF/dem_chilwa_03_flow_direction.tif\")\ndem_acc = terra::rast(\"./assets/TIF/dem_chilwa_04_flow_accumulation.tif\")\n\n# Delineate extent of watershed drainage area\nwatershed = flowdem::watershed(dem_dir, lake) |>\n  terra::as.polygons() |>\n  sf::st_as_sf()\n\n# Visual check\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(watershed) + tmap::tm_borders(col = \"royalblue\", lwd = 2) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n\n# Outputs\nsf::st_write(watershed, \"./assets/SHP/watershed_chilwa_05_flowdem.shp\", delete_dsn=T)\n```\n\n### 2.3.2a `whitebox` Tools\n\nLake Chilwa represents a critical challenge for standard\nwatershed delineation as an endorheic, closed basin where\nwater accumulates through surface inflow and evaporation\nwithout surface outflow. Traditional hydrological algorithms\n[@o1984extraction] assume exorheic drainage systems with\ndefined pour points where water exits the catchment. For\nendorheic systems, we adapted this workflow principally by\nfirst estimating terminal sink points near to maximum flow\nvalues within the lake basin to compute drainages of\ninternal sub-basins and delineating the watershed outwards.\nImplementation steps were as follows:\n\n1.  Hydraulic breaching and filling\n2.  D8 Flow direction and accumulation\n3.  Depression network characterization,\n4.  Derive terminal drainage points,\n5.  Delineate watershed,\n6.  Stream network classification.\n\n### 2.3.2b Hydraulic Conditioning\n\nDigital elevation models contain spurious depressions and\nflat areas arising from data acquisition artifacts,\ninterpolation errors, and measurement precision limitations\n[@lindsay2016efficient]. Artifacts disrupt continuous flow\npath connectivity essential for watershed delineation.\nHydraulic conditioning removes these features while\npreserving genuine topographic depressions such as Lake\nChilwa's endorheic basin.\n\nWe applied depression breaching [@lindsay2016efficient]\nfitted with minimal-cost pathways and depression gradients\n(\\<3m depth) while preserving the primary lake basin. This\napproach removes DEM artifacts more conservatively without\nartificially draining the local system.\n\nWe applied depression filling using the Wang & Liu algorithm\n[@wang2006efficient] to smooth remaining flat areas through\nscan-line method specifically suited to low-relief terrain.\nThe combined breach-then-fill strategy balances\ncomputational efficiency with preservation of hydrologically\nmeaningful features\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n# 1a. Conservative breaching of shallow depressions (<3m) \n# while preserving the primary Lake Chilwa basin\nwhitebox::wbt_breach_depressions(\n  dem     = \"dem_chilwa_00_raw.tif\",\n  output  = \"dem_chilwa_11_breached_flat.tif\",\n  wd      = \"./assets/TIF/\",\n  max_depth = 3,  # Only breach shallow artifacts\n  flat_increment = 0.001\n)\n\n# 1b. Depression filling using Wang & Liu (2006) algorithm\n# Optimized for flat terrain typical of marshlands\nwhitebox::wbt_fill_depressions_wang_and_liu(\n  dem   = \"dem_chilwa_11_breached_flat.tif\",\n  output= \"dem_chilwa_12_filled_wang.tif\",\n  wd    = \"./assets/TIF/\"\n)\n\n# 1c. Quantify conditioning effects\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_11_breached_flat.tif\")\ndem_filled = terra::rast(\"./assets/TIF/dem_chilwa_12_filled_wang.tif\")\n\ndepression_effect <- dem_filled - dem_breach\nbreach_effect = dem_100m - dem_breach  \nfill_effect   = dem_filled - dem_breach\ntotal_effect  = dem_filled - dem_100m  \n\nbreach_effect[breach_effect == 0] <- NA\nfill_effect[fill_effect == 0] <- NA\ntotal_effect[total_effect == 0] <- NA\ntotal_log <- log10(total_effect + 0.01)  # +0.01 to handle small values\n\n# Visualize hydraulic conditioning\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = T),midpoint=0),col.legend=tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(fill_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = T),midpoint=0),col.legend=tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(\n    palette = \"Blues\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(fill_effect) + tmap::tm_raster(\n    values = \"Oranges\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(total_effect) + tmap::tm_raster(\n    values = \"YlOrRd\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"red\", lwd = 1.5) +\n  tmap::tm_layout(main.title = \"Effects of Breaching\")\n\n# Save for later\nterra::writeRaster(depression_effect, overwrite=T,\n  \"./assets/TIF/dem_chilwa_13_depression_effects.tif\")\nterra::writeRaster(breach_effect, overwrite = T, \n  \"./assets/TIF/dem_chilwa_11_breach_effect.tif\")\nterra::writeRaster(fill_effect, overwrite = T,\n  \"./assets/TIF/dem_chilwa_12_fill_effect.tif\")\nterra::writeRaster(total_effect, overwrite = T,\n  \"./assets/TIF/dem_chilwa_13_total_effect.tif\")\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: false\n#| comment: NA\n\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_11_breached_flat.tif\")\ndem_filled = terra::rast(\"./assets/TIF/dem_chilwa_12_filled_wang.tif\")\n\nbreach_effect = terra::rast(\"./assets/TIF/dem_chilwa_11_breach_effect.tif\")\nfill_effect   = terra::rast(\"./assets/TIF/dem_chilwa_12_fill_effect.tif\")\ntotal_effect  = terra::rast(\"./assets/TIF/dem_chilwa_13_total_effect.tif\")\n \ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint=0),col.legend=tm_legend(title=\"\")) +  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(fill_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint=0),col.legend=tm_legend(title=\"\")) +  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(\n    palette = \"Blues\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(fill_effect) + tmap::tm_raster(\n    values = \"Oranges\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(total_effect) + tmap::tm_raster(\n    values = \"YlOrRd\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"red\", lwd = 1.5) +\n  tmap::tm_layout(main.title = \"Effects of Breaching & Filling\")\n```\n\n### 2.3.2c Flow Accumulation\n\nFlow accumulation was computed using the D8\nsingle-flow-direction algorithm [@o1984extraction] via the\n`whitebox` function `wbt_d8_flow_accumulation()`\n[@whitebox-2; @lindsay2016whitebox]. The algorithm routes\nflow from each cell to its steepest downslope neighbor among\neight adjacent cells. Flow accumulation values represent the\nnumber of upstream cells contributing flow to each location.\nAt 100m spatial resolution, 1 cell = 0.01 km² contributing\narea.\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n# 2a. Calculate D8 flow direction\nwhitebox::wbt_d8_pointer(\n  dem = \"dem_chilwa_12_filled_wang.tif\",\n  output = \"dem_chilwa_13_flow_direction_D8.tif\",\n  wd = \"./assets/TIF/\"\n)\n\n# 2b. Calculate flow accumulation\n# Output units: number of upstream cells contributing flow\n# At 100m resolution: 1 cell = 0.01 km² contributing area\nwhitebox::wbt_d8_flow_accumulation(\n  input = \"dem_chilwa_13_flow_direction_D8.tif\", \n  output= \"dem_chilwa_14_flow_accumulation_D8.tif\",\n  wd    = \"./assets/TIF/\",\n  pntr  = T\n  )\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: true\n#| comment: NA\n# Visual check\ndem_acc = terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation.tif\")\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n```\n\n### 2.3.2d Depression Network\n\nEndorheic basins are characterized by internal drainage\nnetworks where water accumulates in topographic depressions\nwithout surface outflow. We quantified two complementary\nmetrics to characterize Lake Chilwa's depression structure:\n\n1.  depth in sink, measuring the vertically from cell to\n    spillover point,\n2.  topographic wetness index (TWI), indicating locations\n    prone to water accumulation based on upslope\n    contributing area and local slope.\n\nDepth in sink analysis was performed on the raw\n(unconditioned) DEM to preserve actual depression depths,\nwhile TWI calculation used the hydrologically conditioned\nDEM and flow accumulation to ensure topologically consistent\nflow routing. These metrics jointly identify the spatial\nextent and hydrological characteristics of the endorheic\nsystem.\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: true\n#| comment: NA\n# 3a. Calculate depth within depressions using raw \n# or unbreached DEM to measure depth below spillover points\nwhitebox::wbt_depth_in_sink(\n  dem = \"dem_chilwa_00_raw.tif\",\n  output = \"dem_chilwa_15_sink_depth.tif\", \n  wd = \"./assets/TIF/\",\n  zero_background = F\n)\n\n# 3b. Calculate topographic wetness index to support\n# delineation of marshland in marginal zones\nwhitebox::wbt_wetness_index(\n  sca = \"dem_chilwa_14_flow_accumulation_D8.tif\",\n  slope = \"dem_chilwa_12_filled_wang.tif\",  \n  output = \"dem_chilwa_16_wetness_index.tif\",\n  wd = \"./assets/TIF/\"\n)\n\nsink_depth <- terra::rast(\"./assets/TIF/dem_chilwa_15_sink_depth.tif\")\nwetness_idx <- terra::rast(\"./assets/TIF/dem_chilwa_16_wetness_index.tif\")\nflow_accum <- terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation_D8.tif\")\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(sink_depth) + tmap::tm_raster(values = \"Blues\", \n  alpha=0.7, title = \"Sink Depth (m)\", style = \"quantile\", n=7) +\n  tmap::tm_shape(wetness_idx) + tmap::tm_raster(values=\"YlGnBu\", \n  alpha=0.5, title=\"Wetness Index\", style = \"quantile\", n=7) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1) +\n  tmap::tm_basemap(\"Esri.WorldImagery\")\n\npar(mfrow = c(1, 2))\nhist(sink_depth[sink_depth <= 25], breaks = 30,\n     main = \"Depths 0-10m\", xlab = \"Depth (m)\", col = \"steelblue\")\nhist(values(wetness_idx), breaks = 50, xlab = \"TWI Value\", \n     main = \"Distribution of Wetness Index\", col = \"darkgreen\")\n```\n\n### 2.3.2e Terminal Pour Points\n\nStandard watershed delineation algorithms require pour\npoints (outlet locations) where accumulated flow exits the\ndrainage system. For endorheic basins lacking surface\noutflow, we identified terminal drainage points at locations\nof maximum flow accumulation within the lake basin,\nrepresenting the ultimate destination of all surface\ndrainage [@lehner2022global; @zhang2020national]\n[@li2025enhanced].\n\nTerminal points were identified through interactive\ndigitization using flow accumulation as reference. We tested\nboth single-point and multi-point configurations to assess\nsensitivity of watershed delineation to pour point placement\nin flat terrain. Points were placed at the lake center where\nflow accumulation exceeds 1 million cells, confirming\nsuccessful convergence of watershed-scale drainage .\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# Assign terminal sink points near high flow accumulation\noutlets = mapedit::editMap(mapview::mapView(dem_acc)) \noutlets = outlets$all |> # convert to sf\n  sf::st_transform(crs_master) |>\n  dplyr::select(geometry)\noutlets$id <- \"chilwa_drainage_terminus_single\"\n\n# Add terminal sink points to improve watershed delineation\noutlets_add = mapedit::editMap(mapview::mapView(dem_acc)) \noutlets_add = outlets_add$all |> # convert to sf\n  sf::st_transform(crs_master) |>\n  dplyr::select(geometry)\noutlets_add$id <- \"chilwa_drainage_terminus_multiple\"\n\n# Visualize & save points for reproducibility\nsf::st_write(outlets, \"./assets/SHP/outlets.shp\", delete_layer=T, quiet=T)\nsf::st_write(outlets_add, \"./assets/SHP/outlets_multiple.shp\", delete_layer=T)\ndem_acc   = terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation.tif\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(values=\"brewer.reds\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col=\"lightblue\") +\n  tmap::tm_shape(outlets) + tmap::tm_symbols(shape=\"id\",lwd=2)\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: false\n#| comment: NA\n\n# Visualize terminal flow points\noutlets = sf::st_read(\"./assets/SHP/outlets_multiple.shp\", quiet=T)\ndem_acc = terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation.tif\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(outlets) + tmap::tm_symbols(shape=\"id\",lwd=2) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n\n```\n\n### 2.3.2f Streams Delineation\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# Stream Classification \nwhitebox::wbt_extract_streams(\n  flow_accum= \"dem_chilwa_14_flow_accumulation_D8.tif\", \n  output    = \"dem_chilwa_18_streams_sensitive.tif\",\n  wd        = \"./assets/TIF/\", \n  zero_background = T,\n  threshold = 25, \n  )\n\nwhitebox::wbt_remove_short_streams(\n  d8_pntr   = \"dem_chilwa_14_flow_direction_D8.tif\",  # flow direction\n  streams   = \"dem_chilwa_18_streams_sensitive.tif\",\n  output    = \"dem_chilwa_19_streams_d8.tif\",\n  wd        = \"./assets/TIF/\",\n  min_length= 200,\n  )\n\nwhitebox::wbt_find_main_stem(\n  d8_pntr = \"dem_chilwa_14_flow_direction_D8.tif\",\n  streams = \"dem_chilwa_19_streams_d8.tif\",\n  output = \"dem_chilwa_20_streams_trunk.tif\",\n  wd = \"./assets/TIF/\"\n)\n\nwhitebox::wbt_raster_streams_to_vector(\n  streams = \"dem_chilwa_20_streams_trunk.tif\",\n  d8_pntr = \"dem_chilwa_14_flow_direction_D8.tif\",\n  output = \"./assets/SHP/streams_chilwa.shp\",\n  wd = \"./assets/TIF/\"\n)\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: true\n#| comment: NA\n# Inputs\nstreams_sf = sf::st_read(\"./assets/SHP/streams_chilwa.shp\")\ndem_filled = terra::rast(\"./assets/TIF/dem_chilwa_12_filled_wang.tif\")\nsf::st_crs(streams_sf) = 3857\n\n# Visualize\ntmap::tm_shape(dem_filled) + tmap::tm_raster(palette = \"Greens\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_shape(streams_sf) + tmap::tm_lines(col = \"steelblue\") +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n\nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |>\n  st_cast() |> st_transform(crs_master)\naoi_country <- giscoR::gisco_get_countries(country = \"Malawi\", resolution = \"3\") |>\n  st_cast() |>\n  st_transform(crs_master)\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 2, col = \"red\")\n\ntmap::tm_shape(dem_site) + tmap::tm_raster(palette = \"Greens\") +\n  tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-inputs-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n#\n## 2. Download hydro data\n\n\n#url_rivers <- \"https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_shp.zip\"\n#url_lakes <- \"https://data.hydrosheds.org/file/hydrolakes/HydroLAKES_polys_v10_shp.zip\"\n#url_watersheds <- \"https://data.hydrosheds.org/file/hydrobasins/customized_with_lakes/hybas_lake_af_lev01-12_v1c.zip\"\n# download.file(url = url, path = getwd(), destfile = file_name)\n\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \nlakes    = terra::vect(\"./assets/inputs/hydro/HydroLAKES_polys_v10.shp\") \nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nwatershed_country = terra::crop(watershed, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nwatershed_site = terra::crop(watershed, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\n# save for faster runtime\nsf::st_write(rivers_country, \"./assets/inputs/rivers_country.shp\")\nsf::st_write(rivers_site, \"./assets/inputs/rivers_site.shp\")\nsf::st_write(lakes_country, \"./assets/inputs/lakes_country.shp\")\nsf::st_write(lakes_site, \"./assets/inputs/lakes_site.shp\")\nsf::st_write(watershed_country, \"./assets/inputs/watershed_country.shp\")\nsf::st_write(watershed_site, \"./assets/inputs/watershed_site.shp\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-extracted-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n\nrivers_country = sf::st_read(\"./assets/inputs/rivers_country.shp\", quiet=T) |> st_cast(\"LINESTRING\")\nrivers_site    = sf::st_read(\"./assets/inputs/rivers_site.shp\", quiet=T)    |> st_cast(\"LINESTRING\")\nlakes_country  = sf::st_read(\"./assets/inputs/lakes_country.shp\", quiet=T)  |> st_cast(\"POLYGON\")\nlakes_site     = sf::st_read(\"./assets/inputs/lakes_site.shp\", quiet=T)     |> st_cast(\"POLYGON\")\nwatershed_site = sf::st_read(\"./assets/inputs/watershed_site.shp\", quiet=T) |> st_cast(\"POLYGON\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n##### Figure 2: Interactive map showing extracted hydrographic layers\n```\n\n```{r}\n#| comment: NA\n#| warning: false\n#| message: false\n#| eval: false\n#| echo: true\ncrs_master = \"EPSG:3005\"\nisland_shoreline = sf::st_read(\"./assets/SHP/island_shoreline.shp\", quiet=T)\n\n# z = 12: 1-Arc Second \n# z = 11: 3-Arc Second \n# z = 10: 5-Arc Second \ndem_7arc = elevatr::get_elev_raster(island_shoreline, z=9,clip=\"locations\")|>\n  terra::rast()|> \n  terra::crop(terra::vect(island_shoreline)) |>  \n  terra::project(crs_master)\n\n#Process DEM by breaching & filling depressions & flats\ndem_condt_7arc  = dem_7arc |> \n  flowdem::breach() |>\n  flowdem::fill(epsilon=T) \n  #flowdem::fill_basins() # costal basins\n\n# Calculate flow direction & accumulation\ndem_dir_7arc = dem_condt_7arc |> flowdem::dirs(mode=\"d8\")\ndem_dir_5arc = dem_condt_5arc |> flowdem::dirs(mode=\"d8\")\ndem_acc_7arc = dem_dir_7arc |> flowdem::accum(mode=\"d8\")\ndem_acc_5arc = dem_dir_5arc |> flowdem::accum(mode=\"d8\")\n\n#tmap::tm_shape(dem) + \n#  tmap::tm_raster(\n#    col.scale = tm_scale_continuous(values = \"viridis\"),\n#    col.legend = tm_legend(title = \"Elevation (m)\", reverse = T)) + \n#  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +\n#  tmap::tm_scalebar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) + \n#  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\")+\n#  tmap::tm_basemap(\"Esri.WorldImagery\")\nwriteRaster(dem_condt_7arc, \"./assets/TIF/dem_7arc_condt.tif\", overwrite=T)\nwriteRaster(dem_condt_5arc, \"./assets/TIF/dem_5arc_condt.tif\", overwrite=T)\nwriteRaster(dem_dir_7arc, \"./assets/TIF/dem_7arc_dir.tif\", overwrite=T)\nwriteRaster(dem_dir_5arc, \"./assets/TIF/dem_5arc_dir.tif\", overwrite=T)\nwriteRaster(dem_acc_7arc, \"./assets/TIF/dem_7arc_acc.tif\", overwrite=T)\nwriteRaster(dem_acc_5arc, \"./assets/TIF/dem_5arc_acc.tif\", overwrite=T)\n```\n\n## 4. Build 3D map\n\n```{r watershed-render}\n#| warning: false\n#| message: false\n#| echo: true\n#| eval: false\n#| comment: NA\n\nrivers_strahler = rivers_site |>\n  dplyr::mutate(\n    width = as.numeric(\n      ORD_FLOW\n    ),\n    width = dplyr::case_when(\n      width == 3 ~ 16,\n      width == 4 ~ 14,\n      width == 5 ~ 12,\n      width == 6 ~ 10,\n      width == 7 ~ 6,\n      TRUE ~ 0\n    )\n  ) |>\n  sf::st_as_sf() |>\n  sf::st_transform(crs = \"epsg:4326\")\n\nh <- nrow(dem_site)\nw <- ncol(dem_site)\n\ndem_matrix = rayshader::raster_to_matrix(dem_site)\n\ndem_matrix |>\n  rayshader:: height_shade() |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = rivers_strahler,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\",\n      linewidth  = rivers_strahler$width,\n      data_column_width = \"width\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = lakes_site,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::plot_3d(\n    dem_matrix,\n    zscale       = 14,\n    solid        = T,\n    shadow       = T,\n    shadow_darkness = 2,\n    background   = \"white\",\n    windowsize   = c(600, 600),\n    zoom         = 0.6,\n    phi          = 40,\n    theta        = 0 \n  )\n```\n\n## 5. Render 3D map\n\n```{r watershed-save}\n#| eval: false\n\nrayshader::render_highquality(\n  preview        = T,\n  light          = F,\n  lightdirection = c(135, 45),\n  lightcolor = c(\"white\"),\n  lightaltitude = 25,\n  ambient_light = 0.1,\n  rotate_env     = 0.4,\n  intensity_env  = 0.85,\n  interactive    = F,\n  parallel       = T,\n  width          = w,\n  height         = h,\n  backgroundhigh=\"#FFFFFF\",\n  backgroundlow=\"#FFFFFF\"\n  )\n```\n\n![Figure 4: Three-dimensional map of Lake Chilwa\nwatershed](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png)\n\n#### References\n\n#### Runtime Log\n\n```{r session-info}\n#| eval: true\ndevtools::session_info()\n```\n","srcMarkdownNoYaml":"\n\n### Environment Setup\n\n```{r setup}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| comment: NA\npacman::p_load(\n  \"bslib\",\n  \"cli\", \"cols4all\", \"covr\", \"cowplot\",\n  \"dendextend\", \"digest\", \"DiagrammeR\", \n  \"dtwclust\", \"downlit\",\n  \"exactextractr\", \"elevatr\",\n  \"FNN\", \"future\", \"flowdem\",\n  \"gdalUtilities\", \"geojsonsf\", \"geos\", \"geodata\", \n  \"ggplot2\", \"ggstats\",\"ggspatial\", \"ggmap\", \n  \"ggplotify\", \"ggpubr\", \"ggrepel\", \"giscoR\",\n  \"hdf5r\", \"httr\", \"httr2\", \"htmltools\",\n  \"jsonlite\",\n  \"leafem\", \"leaflet.providers\", \"libgeos\", \n  \"luz\", \"lwgeom\", \"leaflet\", \"leafgl\",\n  \"mapedit\", \"mapview\", \"maptiles\", \n  \"methods\", \"mgcv\", \"MPI\",\n  \"ncdf4\", \"nnet\",\n  \"openxlsx\",\n  \"parallel\", \"plotly\", \"proj4\", \"PROJ\", \"progress\", \"purrr\",\n  \"randomForest\", \"rasterVis\", \"raster\", \n  \"rayshader\", \"rayvertex\", \n  \"RColorBrewer\", \"rgl\", \"rmapshaper\", \"rsconnect\", \n  \"RStoolbox\", \"rts\", \"rgrass\",\n  \"s2\", \"sf\", \"scales\", \"spdep\", \"stars\", \n  \"stringr\", \"supercells\",\n  \"terra\", \"terrainr\", \"testthat\", \"traudem\", \"taudem\", \n  \"tidyverse\", \"tidyterra\", \"tools\",\n  \"tmap\", \"tmaptools\", \"terrainr\",\n  \"whitebox\", \"xgboost\"\n  )\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| include: false\n#| error: false\n#| echo: false\n#| comment: NA\n\n# bleeding edge installs\n#remotes::install_github(\"lucarraro/traudem\", force=T)\n#pak::pkg_install(\"MPI\")\n#devtools::install_github(\"lucarraro/traudem\")\n#remotes::install_github(\"opengeos/whiteboxR\", build=F)\n#remotes::install_github(\"giswqs/whiteboxR\") \n#install.packages(\"easypackages\")\n\n\nknitr::opts_chunk$set(\n  echo = TRUE,\n  message = FALSE, \n  warning = FALSE,\n  error = FALSE, \n  comment = NA, \n  tidy.opts = list(width.cutoff = 60)\n  ) \n\noptions(\n  htmltools.dir.version = FALSE, \n  htmltools.preserve.raw = FALSE)\n\ntmap::tmap_options(component.autoscale=F,\n  max.raster = c(plot=9500000, view=10000000)\n  )\n\n# whitebox doesnt like working with files in memory\n# so we need to assign path to working directory \n# whitebox::install_whitebox() # install whitebox and GRASS libraries\nwhitebox::wbt_init() # activate whitebox library in current directory\nlist.files(\"/usr/local/taudem/\") # Check traudem.pkg installation\n# traudem::taudem_sitrep() # Check traudem dependencies\n# Ignore above message \"Can't find  `MoveOutletsToStrm`\"\n\n# ----- TauDEM d8 Check ---- #\n# all(sapply(d8, file.exists))\n# Expected result: [1] TRUE\n# all(file.exists(unlist(d8)))\n# Expected result: [1] TRUE\n# all(map_lgl(d8, file.exists))\n# Expected result: [1] TRUE\n# can_register_taudem()\n# Expected result: [1] TRUE\n# Whitebox loaded tools: `print(wbt_list_tools())`\n# Whitebox shortcuts : `print(wbt_help())`\n# Whitebox version : `print(wbt_version())`\n# Whitebox tool guide: `print(wbt_tool_help(\"lidar_info\"))`\\\n# Whitebox parameter guide: `print(wbt_tool_parameters(\"slope\"))`\nmapviewOptions(fgb = FALSE)\nsf::sf_use_s2(use_s2 = FALSE)\n```\n\n```{css, echo=FALSE, class.source = 'foldable'}\ndiv.column {\n    display: inline-block;\n    vertical-align: top;\n    width: 50%;\n}\n\n#TOC::before {\n  content: \"\";\n  display: block;\n  height:200px;\n  width: 200px;\n  background-image: url('https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png');\n  background-size: contain;\n  background-position: 50% 50%;\n  padding-top: 80px !important;\n  background-repeat: no-repeat;\n}\n```\n\n## 2.0 Overview\n\nThis analysis performs geomorphological processing of\ndigital elevation models (DEMs) to extract critical\nwatershed characteristics needed for hydrological modeling.\nWe implement two complementary workflows for watershed\ndelineation and hydraulic network analysis, comparing two\napproaches using `flowdem` [@flowdem] and `whitebox`\n[@whitebox] packages with `RichDEM` [@RichDEM], `GDAL 3.11`\n[@GDAL] and `r-spatial` [@terra; @sf; @stars] libraries.\n\n## 2.1 Declare AOIs\n\n```{r pop-aoi}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n\ncrs_master = sf::st_crs(\"EPSG:3857\")\ncountry = giscoR::gisco_get_countries(\n  country = \"Malawi\", resolution = \"3\") |>\n  sf::st_cast() |> sf::st_transform(crs_master)\nlake  = sf::st_read(\"./assets/inputs/lakes_site.shp\") |>\n  sf::st_cast() |> sf::st_transform(crs_master)\n\nbbox = lake |>\n  sf::st_buffer(dist = 60000) |> \n  sf::st_bbox() |>\n  sf::st_as_sfc() |>\n  sf::st_sf()\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(country) + tmap::tm_borders(lwd=1, col= \"green\") +\n  tmap::tm_shape(bbox) + tmap::tm_borders(lwd=2, col= \"orange\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(lwd=2, col= \"blue\") +\n  tmap::tm_basemap(\"Esri.WorldImagery\")\n```\n\n##### Figure 1: Interactive map of area of interest polygons (AOI)\n\n## 2.2 Download DEM\n\nWe acquired elevation data using the `elevatr` package\n[@elevatr] that accesses collections via Amazon Web Services\nTerrain Tiles and Open Topography Global DEM [API](#0) to\nglobal digital elevation models including SRTMGL3, SRTMGL1,\nAW3D30, and SRTM15Plus. More often than not, `OSM` zooming\nis applied. At lower latitudes, setting `zoom=11` returns a\ndata resolution of 3-arc-seconds (76m at 0°Lat), which we\nresample to a standardized 100m grid which also informs use\nof downstream metrics that are applied at scale during\nwatershed analysis. To limit dependency conflicts, the Web\nMercator projection (EPSG:3857) was assigned `crs_master`\nabove and applied below going forward.\n\n```{r watershed-dem}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# z = 12: 1-Arc Second Resolution\n# z = 11: 3-Arc Second Resolution\n# z = 10: 5-Arc Second Resolution\ndem = elevatr::get_elev_raster(bbox, z=10, clip=\"locations\") |> terra::rast() \nnames(dem) = \"elevation\" \n\ndem_100m  = stars::st_warp(\n  stars::st_as_stars(dem), \n  cellsize=100, crs=sf::st_crs(crs_master)) |>\n  terra::rast()\n```\n\n## 2.3 Process DEM\n\n### 2.3.1a `flowdem` Tools\n\nThe `flowdem` package [@flowdem] provides a streamlined R\ninterface to `RichDEM` library, offering computationally\nefficient implementations of depression breaching, filling,\nand flow routing operations. While the `WhiteboxTools`\nworkflow below (Section 2.3) provides more comprehensive\ncontrol over individual processing steps, the `flowdem`\napproach enables rapid exploratory analysis through\nintegrated functions that combine multiple operations. This\n\"quick and efficient\" methodology is particularly valuable\nfor initial watershed characterization and iterative\nparameter testing.\n\nWe present the `flowdem` workflow as a complementary\napproach demonstrating that multiple algorithmic\nimplementations can yield consistent watershed boundaries\nwhen applied to the same study system. Comparing outputs\nfrom both `flowdem` and `whitebox` packages also allows for\nvalidation of challenging data tasks such as endorheic basin\ndelineation.\n\n### 2.3.1b Hydraulic Conditioning\n\n`RichDEM`'s depression handling implements priority-flood\nalgorithms [@RichDEM; @barnes2014priority] that efficiently\nprocess large DEMs through optimized queue-based operations.\nThe `flowdem::breach()` function carves minimal-depth\nchannels through depressions, while `flowdem::fill()` with\nepsilon gradient (`epsilon = TRUE`) ensures continuous\ndownstream flow by adding infinitesimal increments to flat\nareas. This combined approach removes topological barriers\nto flow routing while preserving the computational\nefficiency advantages of the RichDEM implementation.\n\nThe epsilon filling parameter adds small elevation\nincrements (typically 10⁻⁶ to 10⁻⁴ m) to ensure strict\nmonotonic descent along flow paths, preventing ambiguous\nflow directions in perfectly flat terrain common to\nmarshland environments. This is varies slightly to the\n`WhiteboxTools` `flat_increment` parameter, though both\nachieve similar outcomes through slightly different\nnumerical implementations.\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# Apply breaching & filling to depressions & flats\ndem_breach = flowdem::breach(dem_100m) \ndem_fill   = flowdem::fill(dem_breach, epsilon=T) \n\n# Visualize hydraulic conditioning\ndem_breach_diff <- dem_100m - dem_breach\ndem_breach_diff[dem_breach_diff == 0] <- NA\ndem_fill_diff <- dem_100m - dem_fill\ndem_fill_diff[dem_fill_diff == 0] <- NA\n\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(dem_breach_diff) + tmap::tm_raster(col.scale=tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(dem_fill_diff) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint = 0), col.legend = tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n\n# Save conditioned DEMs\nterra::writeRaster(dem_breach, overwrite = TRUE,\n  \"./assets/TIF/dem_chilwa_01_breached.tif\")\nterra::writeRaster(dem_fill, overwrite = TRUE,\n  \"./assets/TIF/dem_chilwa_02_filled.tif\")\n```\n\n![](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/_site/watershed-map_files/figure-html/watershed-dem-1.png){fig-align=\"center\"}\n\n### 2.3.1c Flow Accumulation\n\nFlow routing follows the D8 algorithm [@o1984extraction]\nimplemented through RichDEM's optimized structures. The\n`flowdem::dirs()` function calculates flow direction\npointers, which are then used as input to compute flow\naccumulation. This follows familiar two-step process of\nother workflows, but executes using a more memory-efficient\nfunction often useful when importing large raster and point\ncloud datasets.\n\nThe Flow accumulation values represent the number of\nupstream cells contributing flow to each location, identical\nin interpretation to WhiteboxTools outputs. At 100m\nresolution, each cell represents 0.01 km² (1 hectare) of\ncontributing area, enabling direct conversion between cell\ncounts and drainage area in km².\n\n```{r}\n#|warning: false\n#|message: false \n#|error: false \n#|eval: false \n#|echo: true \n#|comment: NA\n# Inputs\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_01_breached.tif\")\ndem_fill = terra::rast(\"./assets/TIF/dem_chilwa_02_filled.tif\")\n\n# D8 flow direction + accumulation from filled DEM\ndem_dir <- flowdem::dirs(dem_fill, mode = \"d8\") \ndem_acc <- flowdem::accum(dem_dir, mode = \"d8\")\n\n# Verify flow accumulation statistics\ncat(\"Flow accumulation summary (flowdem):\\n\")\ncat(\"Minimum:\", min(values(dem_acc), na.rm = TRUE),\"cells\\n\") \ncat(\"Median:\", median(values(dem_acc), na.rm =TRUE), \"cells\\n\") \ncat(\"Maximum:\", max(values(dem_acc), na.rm= TRUE), \"cells\\n\") \ncat(\"Max contributing area:\", round(max(values(\n  dem_acc), na.rm = TRUE) * 0.01, 1), \"km²\\n\")\n\nterra::writeRaster(dem_dir, overwrite=T,\n  \"./assets/TIF/dem_chilwa_03_flow_direction.tif\")\nterra::writeRaster(dem_acc, overwrite=T, \n  \"./assets/TIF/dem_chilwa_04_flow_accumulation.tif\")\n\n# Visual check\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n```\n\n### 2.3.1d Watershed Delineation\n\nThe `flowdem::watershed()` function identifies all cells\nthat drain to a specified feature, in this case, the Lake\nChilwa boundary polygon. This approach differs from\npour-point-based methods by using the entire lake perimeter\nas the drainage terminus, automatically capturing all flow\npaths converging on the water body. For endorheic systems\nwhere the terminal sink is spatially extensive (Lake Chilwa\nspans \\~60 km N-S), this polygon-based approach may be more\nrobust than single-point methods, as it captures multiple\nconvergent flow paths around the lake's perimeter.\n\nThe resulting watershed polygon represents the complete\ncatchment area draining to Lake Chilwa through surface flow\npathways identified by the D8 algorithm. Post-processing\nconverts the raster watershed output to vector format for\nintegration with other spatial datasets and area\ncalculations.\n\n```{r watershed-dem-hidden}\n#| warning: false\n#| message: false\n#| error: false\n#| echo: true\n#| eval: true\n#| comment: NA\n# Inputs\ndem_dir = terra::rast(\"./assets/TIF/dem_chilwa_03_flow_direction.tif\")\ndem_acc = terra::rast(\"./assets/TIF/dem_chilwa_04_flow_accumulation.tif\")\n\n# Delineate extent of watershed drainage area\nwatershed = flowdem::watershed(dem_dir, lake) |>\n  terra::as.polygons() |>\n  sf::st_as_sf()\n\n# Visual check\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(watershed) + tmap::tm_borders(col = \"royalblue\", lwd = 2) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n\n# Outputs\nsf::st_write(watershed, \"./assets/SHP/watershed_chilwa_05_flowdem.shp\", delete_dsn=T)\n```\n\n### 2.3.2a `whitebox` Tools\n\nLake Chilwa represents a critical challenge for standard\nwatershed delineation as an endorheic, closed basin where\nwater accumulates through surface inflow and evaporation\nwithout surface outflow. Traditional hydrological algorithms\n[@o1984extraction] assume exorheic drainage systems with\ndefined pour points where water exits the catchment. For\nendorheic systems, we adapted this workflow principally by\nfirst estimating terminal sink points near to maximum flow\nvalues within the lake basin to compute drainages of\ninternal sub-basins and delineating the watershed outwards.\nImplementation steps were as follows:\n\n1.  Hydraulic breaching and filling\n2.  D8 Flow direction and accumulation\n3.  Depression network characterization,\n4.  Derive terminal drainage points,\n5.  Delineate watershed,\n6.  Stream network classification.\n\n### 2.3.2b Hydraulic Conditioning\n\nDigital elevation models contain spurious depressions and\nflat areas arising from data acquisition artifacts,\ninterpolation errors, and measurement precision limitations\n[@lindsay2016efficient]. Artifacts disrupt continuous flow\npath connectivity essential for watershed delineation.\nHydraulic conditioning removes these features while\npreserving genuine topographic depressions such as Lake\nChilwa's endorheic basin.\n\nWe applied depression breaching [@lindsay2016efficient]\nfitted with minimal-cost pathways and depression gradients\n(\\<3m depth) while preserving the primary lake basin. This\napproach removes DEM artifacts more conservatively without\nartificially draining the local system.\n\nWe applied depression filling using the Wang & Liu algorithm\n[@wang2006efficient] to smooth remaining flat areas through\nscan-line method specifically suited to low-relief terrain.\nThe combined breach-then-fill strategy balances\ncomputational efficiency with preservation of hydrologically\nmeaningful features\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n# 1a. Conservative breaching of shallow depressions (<3m) \n# while preserving the primary Lake Chilwa basin\nwhitebox::wbt_breach_depressions(\n  dem     = \"dem_chilwa_00_raw.tif\",\n  output  = \"dem_chilwa_11_breached_flat.tif\",\n  wd      = \"./assets/TIF/\",\n  max_depth = 3,  # Only breach shallow artifacts\n  flat_increment = 0.001\n)\n\n# 1b. Depression filling using Wang & Liu (2006) algorithm\n# Optimized for flat terrain typical of marshlands\nwhitebox::wbt_fill_depressions_wang_and_liu(\n  dem   = \"dem_chilwa_11_breached_flat.tif\",\n  output= \"dem_chilwa_12_filled_wang.tif\",\n  wd    = \"./assets/TIF/\"\n)\n\n# 1c. Quantify conditioning effects\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_11_breached_flat.tif\")\ndem_filled = terra::rast(\"./assets/TIF/dem_chilwa_12_filled_wang.tif\")\n\ndepression_effect <- dem_filled - dem_breach\nbreach_effect = dem_100m - dem_breach  \nfill_effect   = dem_filled - dem_breach\ntotal_effect  = dem_filled - dem_100m  \n\nbreach_effect[breach_effect == 0] <- NA\nfill_effect[fill_effect == 0] <- NA\ntotal_effect[total_effect == 0] <- NA\ntotal_log <- log10(total_effect + 0.01)  # +0.01 to handle small values\n\n# Visualize hydraulic conditioning\ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = T),midpoint=0),col.legend=tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(fill_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = T),midpoint=0),col.legend=tm_legend(title=\"\")) +\n  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(\n    palette = \"Blues\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(fill_effect) + tmap::tm_raster(\n    values = \"Oranges\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(total_effect) + tmap::tm_raster(\n    values = \"YlOrRd\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"red\", lwd = 1.5) +\n  tmap::tm_layout(main.title = \"Effects of Breaching\")\n\n# Save for later\nterra::writeRaster(depression_effect, overwrite=T,\n  \"./assets/TIF/dem_chilwa_13_depression_effects.tif\")\nterra::writeRaster(breach_effect, overwrite = T, \n  \"./assets/TIF/dem_chilwa_11_breach_effect.tif\")\nterra::writeRaster(fill_effect, overwrite = T,\n  \"./assets/TIF/dem_chilwa_12_fill_effect.tif\")\nterra::writeRaster(total_effect, overwrite = T,\n  \"./assets/TIF/dem_chilwa_13_total_effect.tif\")\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: false\n#| comment: NA\n\ndem_breach = terra::rast(\"./assets/TIF/dem_chilwa_11_breached_flat.tif\")\ndem_filled = terra::rast(\"./assets/TIF/dem_chilwa_12_filled_wang.tif\")\n\nbreach_effect = terra::rast(\"./assets/TIF/dem_chilwa_11_breach_effect.tif\")\nfill_effect   = terra::rast(\"./assets/TIF/dem_chilwa_12_fill_effect.tif\")\ntotal_effect  = terra::rast(\"./assets/TIF/dem_chilwa_13_total_effect.tif\")\n \ntmap::tmap_mode(\"plot\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint=0),col.legend=tm_legend(title=\"\")) +  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Breaching\", size=.8) -> tm_breach\n\ntmap::tm_shape(fill_effect) + tmap::tm_raster(col.scale = tm_scale_continuous(\n    values = hcl.colors(50, rev = TRUE),midpoint=0),col.legend=tm_legend(title=\"\")) +  tmap::tm_scalebar(position=c(\"RIGHT\", \"BOTTOM\"), text.size = .5) +\n  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\",position=c(\"RIGHT\", \"top\")) +\n  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +\n  tmap::tm_title(\"Effects of Filling\", size=.8) -> tm_fill\ntmap::tmap_arrange(tm_breach, tm_fill, nrow=1)\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(breach_effect) + tmap::tm_raster(\n    palette = \"Blues\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(fill_effect) + tmap::tm_raster(\n    values = \"Oranges\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(total_effect) + tmap::tm_raster(\n    values = \"YlOrRd\", title = \"Depth (m)\", style = \"cont\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"red\", lwd = 1.5) +\n  tmap::tm_layout(main.title = \"Effects of Breaching & Filling\")\n```\n\n### 2.3.2c Flow Accumulation\n\nFlow accumulation was computed using the D8\nsingle-flow-direction algorithm [@o1984extraction] via the\n`whitebox` function `wbt_d8_flow_accumulation()`\n[@whitebox-2; @lindsay2016whitebox]. The algorithm routes\nflow from each cell to its steepest downslope neighbor among\neight adjacent cells. Flow accumulation values represent the\nnumber of upstream cells contributing flow to each location.\nAt 100m spatial resolution, 1 cell = 0.01 km² contributing\narea.\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n# 2a. Calculate D8 flow direction\nwhitebox::wbt_d8_pointer(\n  dem = \"dem_chilwa_12_filled_wang.tif\",\n  output = \"dem_chilwa_13_flow_direction_D8.tif\",\n  wd = \"./assets/TIF/\"\n)\n\n# 2b. Calculate flow accumulation\n# Output units: number of upstream cells contributing flow\n# At 100m resolution: 1 cell = 0.01 km² contributing area\nwhitebox::wbt_d8_flow_accumulation(\n  input = \"dem_chilwa_13_flow_direction_D8.tif\", \n  output= \"dem_chilwa_14_flow_accumulation_D8.tif\",\n  wd    = \"./assets/TIF/\",\n  pntr  = T\n  )\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: true\n#| comment: NA\n# Visual check\ndem_acc = terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation.tif\")\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n```\n\n### 2.3.2d Depression Network\n\nEndorheic basins are characterized by internal drainage\nnetworks where water accumulates in topographic depressions\nwithout surface outflow. We quantified two complementary\nmetrics to characterize Lake Chilwa's depression structure:\n\n1.  depth in sink, measuring the vertically from cell to\n    spillover point,\n2.  topographic wetness index (TWI), indicating locations\n    prone to water accumulation based on upslope\n    contributing area and local slope.\n\nDepth in sink analysis was performed on the raw\n(unconditioned) DEM to preserve actual depression depths,\nwhile TWI calculation used the hydrologically conditioned\nDEM and flow accumulation to ensure topologically consistent\nflow routing. These metrics jointly identify the spatial\nextent and hydrological characteristics of the endorheic\nsystem.\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: true\n#| comment: NA\n# 3a. Calculate depth within depressions using raw \n# or unbreached DEM to measure depth below spillover points\nwhitebox::wbt_depth_in_sink(\n  dem = \"dem_chilwa_00_raw.tif\",\n  output = \"dem_chilwa_15_sink_depth.tif\", \n  wd = \"./assets/TIF/\",\n  zero_background = F\n)\n\n# 3b. Calculate topographic wetness index to support\n# delineation of marshland in marginal zones\nwhitebox::wbt_wetness_index(\n  sca = \"dem_chilwa_14_flow_accumulation_D8.tif\",\n  slope = \"dem_chilwa_12_filled_wang.tif\",  \n  output = \"dem_chilwa_16_wetness_index.tif\",\n  wd = \"./assets/TIF/\"\n)\n\nsink_depth <- terra::rast(\"./assets/TIF/dem_chilwa_15_sink_depth.tif\")\nwetness_idx <- terra::rast(\"./assets/TIF/dem_chilwa_16_wetness_index.tif\")\nflow_accum <- terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation_D8.tif\")\n\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(sink_depth) + tmap::tm_raster(values = \"Blues\", \n  alpha=0.7, title = \"Sink Depth (m)\", style = \"quantile\", n=7) +\n  tmap::tm_shape(wetness_idx) + tmap::tm_raster(values=\"YlGnBu\", \n  alpha=0.5, title=\"Wetness Index\", style = \"quantile\", n=7) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1) +\n  tmap::tm_basemap(\"Esri.WorldImagery\")\n\npar(mfrow = c(1, 2))\nhist(sink_depth[sink_depth <= 25], breaks = 30,\n     main = \"Depths 0-10m\", xlab = \"Depth (m)\", col = \"steelblue\")\nhist(values(wetness_idx), breaks = 50, xlab = \"TWI Value\", \n     main = \"Distribution of Wetness Index\", col = \"darkgreen\")\n```\n\n### 2.3.2e Terminal Pour Points\n\nStandard watershed delineation algorithms require pour\npoints (outlet locations) where accumulated flow exits the\ndrainage system. For endorheic basins lacking surface\noutflow, we identified terminal drainage points at locations\nof maximum flow accumulation within the lake basin,\nrepresenting the ultimate destination of all surface\ndrainage [@lehner2022global; @zhang2020national]\n[@li2025enhanced].\n\nTerminal points were identified through interactive\ndigitization using flow accumulation as reference. We tested\nboth single-point and multi-point configurations to assess\nsensitivity of watershed delineation to pour point placement\nin flat terrain. Points were placed at the lake center where\nflow accumulation exceeds 1 million cells, confirming\nsuccessful convergence of watershed-scale drainage .\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# Assign terminal sink points near high flow accumulation\noutlets = mapedit::editMap(mapview::mapView(dem_acc)) \noutlets = outlets$all |> # convert to sf\n  sf::st_transform(crs_master) |>\n  dplyr::select(geometry)\noutlets$id <- \"chilwa_drainage_terminus_single\"\n\n# Add terminal sink points to improve watershed delineation\noutlets_add = mapedit::editMap(mapview::mapView(dem_acc)) \noutlets_add = outlets_add$all |> # convert to sf\n  sf::st_transform(crs_master) |>\n  dplyr::select(geometry)\noutlets_add$id <- \"chilwa_drainage_terminus_multiple\"\n\n# Visualize & save points for reproducibility\nsf::st_write(outlets, \"./assets/SHP/outlets.shp\", delete_layer=T, quiet=T)\nsf::st_write(outlets_add, \"./assets/SHP/outlets_multiple.shp\", delete_layer=T)\ndem_acc   = terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation.tif\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(values=\"brewer.reds\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col=\"lightblue\") +\n  tmap::tm_shape(outlets) + tmap::tm_symbols(shape=\"id\",lwd=2)\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: false\n#| comment: NA\n\n# Visualize terminal flow points\noutlets = sf::st_read(\"./assets/SHP/outlets_multiple.shp\", quiet=T)\ndem_acc = terra::rast(\"./assets/TIF/dem_chilwa_14_flow_accumulation.tif\")\ntmap::tm_shape(dem_acc) + tmap::tm_raster(\n  values=\"OrRd\", title = \"D8 Flow Accumulation\",\n  breaks = c(1, 2, 3, 5, 10, 50, 100, 1000, 1200000),\n  labels = c(\"1-2\", \"2-3\", \"3-5\", \"5-10\", \"10-50\", \"50-100\", \"100-1K\", \">1K\")) +\n  tmap::tm_shape(outlets) + tmap::tm_symbols(shape=\"id\",lwd=2) +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n\n```\n\n### 2.3.2f Streams Delineation\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: false\n#| echo: true\n#| comment: NA\n\n# Stream Classification \nwhitebox::wbt_extract_streams(\n  flow_accum= \"dem_chilwa_14_flow_accumulation_D8.tif\", \n  output    = \"dem_chilwa_18_streams_sensitive.tif\",\n  wd        = \"./assets/TIF/\", \n  zero_background = T,\n  threshold = 25, \n  )\n\nwhitebox::wbt_remove_short_streams(\n  d8_pntr   = \"dem_chilwa_14_flow_direction_D8.tif\",  # flow direction\n  streams   = \"dem_chilwa_18_streams_sensitive.tif\",\n  output    = \"dem_chilwa_19_streams_d8.tif\",\n  wd        = \"./assets/TIF/\",\n  min_length= 200,\n  )\n\nwhitebox::wbt_find_main_stem(\n  d8_pntr = \"dem_chilwa_14_flow_direction_D8.tif\",\n  streams = \"dem_chilwa_19_streams_d8.tif\",\n  output = \"dem_chilwa_20_streams_trunk.tif\",\n  wd = \"./assets/TIF/\"\n)\n\nwhitebox::wbt_raster_streams_to_vector(\n  streams = \"dem_chilwa_20_streams_trunk.tif\",\n  d8_pntr = \"dem_chilwa_14_flow_direction_D8.tif\",\n  output = \"./assets/SHP/streams_chilwa.shp\",\n  wd = \"./assets/TIF/\"\n)\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| error: false\n#| eval: true\n#| echo: true\n#| comment: NA\n# Inputs\nstreams_sf = sf::st_read(\"./assets/SHP/streams_chilwa.shp\")\ndem_filled = terra::rast(\"./assets/TIF/dem_chilwa_12_filled_wang.tif\")\nsf::st_crs(streams_sf) = 3857\n\n# Visualize\ntmap::tm_shape(dem_filled) + tmap::tm_raster(palette = \"Greens\") +\n  tmap::tm_shape(lake) + tmap::tm_borders(col = \"turquoise\", lwd = 2) +\n  tmap::tm_shape(streams_sf) + tmap::tm_lines(col = \"steelblue\") +\n  tmap::tm_layout(legend.text.size = 0.8, legend.title.size = 1)\n```\n\n```{r}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n\nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\naoi_site   = sf::read_sf(\"./assets/inputs/chilwa_watershed_4326.shp\") |>\n  st_cast() |> st_transform(crs_master)\naoi_country <- giscoR::gisco_get_countries(country = \"Malawi\", resolution = \"3\") |>\n  st_cast() |>\n  st_transform(crs_master)\n\n# Interactive map mode: \"view\"\ntmap::tmap_mode(\"view\")\ntmap::tm_shape(aoi_country) +\n  tmap::tm_borders(lwd = 1, col = \"green\") +\n  tmap::tm_shape(aoi_site) +\n  tmap::tm_borders(lwd = 2, col = \"red\")\n\ntmap::tm_shape(dem_site) + tmap::tm_raster(palette = \"Greens\") +\n  tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-inputs-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n#| comment: NA\n#\n## 2. Download hydro data\n\n\n#url_rivers <- \"https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_shp.zip\"\n#url_lakes <- \"https://data.hydrosheds.org/file/hydrolakes/HydroLAKES_polys_v10_shp.zip\"\n#url_watersheds <- \"https://data.hydrosheds.org/file/hydrobasins/customized_with_lakes/hybas_lake_af_lev01-12_v1c.zip\"\n# download.file(url = url, path = getwd(), destfile = file_name)\n\nrivers   = terra::vect(\"./assets/inputs/hydro/HydroRIVERS_v10.shp\") \nlakes    = terra::vect(\"./assets/inputs/hydro/HydroLAKES_polys_v10.shp\") \nwatershed= terra::vect(\"./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp\")\n\nrivers_country = terra::crop(rivers, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nrivers_site = terra::crop(rivers, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nlakes_country = terra::crop(lakes, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nlakes_site = terra::crop(lakes, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\nwatershed_country = terra::crop(watershed, aoi_country) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\nwatershed_site = terra::crop(watershed, aoi_site) |> \n  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)\n\n# save for faster runtime\nsf::st_write(rivers_country, \"./assets/inputs/rivers_country.shp\")\nsf::st_write(rivers_site, \"./assets/inputs/rivers_site.shp\")\nsf::st_write(lakes_country, \"./assets/inputs/lakes_country.shp\")\nsf::st_write(lakes_site, \"./assets/inputs/lakes_site.shp\")\nsf::st_write(watershed_country, \"./assets/inputs/watershed_country.shp\")\nsf::st_write(watershed_site, \"./assets/inputs/watershed_site.shp\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n```\n\n```{r watershed-extracted-deprecated}\n#| warning: false\n#| message: false\n#| echo: false\n#| eval: false\n\nrivers_country = sf::st_read(\"./assets/inputs/rivers_country.shp\", quiet=T) |> st_cast(\"LINESTRING\")\nrivers_site    = sf::st_read(\"./assets/inputs/rivers_site.shp\", quiet=T)    |> st_cast(\"LINESTRING\")\nlakes_country  = sf::st_read(\"./assets/inputs/lakes_country.shp\", quiet=T)  |> st_cast(\"POLYGON\")\nlakes_site     = sf::st_read(\"./assets/inputs/lakes_site.shp\", quiet=T)     |> st_cast(\"POLYGON\")\nwatershed_site = sf::st_read(\"./assets/inputs/watershed_site.shp\", quiet=T) |> st_cast(\"POLYGON\")\n\n#tmap::tm_shape(rivers_site) + tm_lines(col = \"steelblue\") +\n#  tmap::tm_shape(lakes_site) + tm_fill (\"steelblue\") +\n#  tmap::tm_shape(watershed_site) + tm_borders(col = \"red\", lwd=1)\n##### Figure 2: Interactive map showing extracted hydrographic layers\n```\n\n```{r}\n#| comment: NA\n#| warning: false\n#| message: false\n#| eval: false\n#| echo: true\ncrs_master = \"EPSG:3005\"\nisland_shoreline = sf::st_read(\"./assets/SHP/island_shoreline.shp\", quiet=T)\n\n# z = 12: 1-Arc Second \n# z = 11: 3-Arc Second \n# z = 10: 5-Arc Second \ndem_7arc = elevatr::get_elev_raster(island_shoreline, z=9,clip=\"locations\")|>\n  terra::rast()|> \n  terra::crop(terra::vect(island_shoreline)) |>  \n  terra::project(crs_master)\n\n#Process DEM by breaching & filling depressions & flats\ndem_condt_7arc  = dem_7arc |> \n  flowdem::breach() |>\n  flowdem::fill(epsilon=T) \n  #flowdem::fill_basins() # costal basins\n\n# Calculate flow direction & accumulation\ndem_dir_7arc = dem_condt_7arc |> flowdem::dirs(mode=\"d8\")\ndem_dir_5arc = dem_condt_5arc |> flowdem::dirs(mode=\"d8\")\ndem_acc_7arc = dem_dir_7arc |> flowdem::accum(mode=\"d8\")\ndem_acc_5arc = dem_dir_5arc |> flowdem::accum(mode=\"d8\")\n\n#tmap::tm_shape(dem) + \n#  tmap::tm_raster(\n#    col.scale = tm_scale_continuous(values = \"viridis\"),\n#    col.legend = tm_legend(title = \"Elevation (m)\", reverse = T)) + \n#  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +\n#  tmap::tm_scalebar(position = c(\"LEFT\", \"BOTTOM\"), text.size = 0.5) + \n#  tmap::tm_compass(color.dark=\"gray60\",text.color=\"gray60\")+\n#  tmap::tm_basemap(\"Esri.WorldImagery\")\nwriteRaster(dem_condt_7arc, \"./assets/TIF/dem_7arc_condt.tif\", overwrite=T)\nwriteRaster(dem_condt_5arc, \"./assets/TIF/dem_5arc_condt.tif\", overwrite=T)\nwriteRaster(dem_dir_7arc, \"./assets/TIF/dem_7arc_dir.tif\", overwrite=T)\nwriteRaster(dem_dir_5arc, \"./assets/TIF/dem_5arc_dir.tif\", overwrite=T)\nwriteRaster(dem_acc_7arc, \"./assets/TIF/dem_7arc_acc.tif\", overwrite=T)\nwriteRaster(dem_acc_5arc, \"./assets/TIF/dem_5arc_acc.tif\", overwrite=T)\n```\n\n## 4. Build 3D map\n\n```{r watershed-render}\n#| warning: false\n#| message: false\n#| echo: true\n#| eval: false\n#| comment: NA\n\nrivers_strahler = rivers_site |>\n  dplyr::mutate(\n    width = as.numeric(\n      ORD_FLOW\n    ),\n    width = dplyr::case_when(\n      width == 3 ~ 16,\n      width == 4 ~ 14,\n      width == 5 ~ 12,\n      width == 6 ~ 10,\n      width == 7 ~ 6,\n      TRUE ~ 0\n    )\n  ) |>\n  sf::st_as_sf() |>\n  sf::st_transform(crs = \"epsg:4326\")\n\nh <- nrow(dem_site)\nw <- ncol(dem_site)\n\ndem_matrix = rayshader::raster_to_matrix(dem_site)\n\ndem_matrix |>\n  rayshader:: height_shade() |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = rivers_strahler,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\",\n      linewidth  = rivers_strahler$width,\n      data_column_width = \"width\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::add_overlay(\n    rayshader::generate_line_overlay(\n      geometry   = lakes_site,\n      extent     = dem_site,\n      heightmap  = dem_matrix,\n      color      = \"#387B9C\"\n      ), alphalayer = 1\n    ) |>\n  rayshader::plot_3d(\n    dem_matrix,\n    zscale       = 14,\n    solid        = T,\n    shadow       = T,\n    shadow_darkness = 2,\n    background   = \"white\",\n    windowsize   = c(600, 600),\n    zoom         = 0.6,\n    phi          = 40,\n    theta        = 0 \n  )\n```\n\n## 5. Render 3D map\n\n```{r watershed-save}\n#| eval: false\n\nrayshader::render_highquality(\n  preview        = T,\n  light          = F,\n  lightdirection = c(135, 45),\n  lightcolor = c(\"white\"),\n  lightaltitude = 25,\n  ambient_light = 0.1,\n  rotate_env     = 0.4,\n  intensity_env  = 0.85,\n  interactive    = F,\n  parallel       = T,\n  width          = w,\n  height         = h,\n  backgroundhigh=\"#FFFFFF\",\n  backgroundlow=\"#FFFFFF\"\n  )\n```\n\n![Figure 4: Three-dimensional map of Lake Chilwa\nwatershed](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/06-watershed-3D.png)\n\n#### References\n\n#### Runtime Log\n\n```{r session-info}\n#| eval: true\ndevtools::session_info()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":8,"fig-height":6,"fig-format":"png","fig-dpi":150,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"highlight-style":"pygments","output-file":"watershed-map.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","theme":["cosmo","styles.scss"],"title":"Watershed Maps","editor_options":{"markdown":{"wrap":60}},"bibliography":["references.bib"],"toc-location":"right","toc-expand":true,"page-layout":"article"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}