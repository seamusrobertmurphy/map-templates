---
title: ""
execute:
  echo: true
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 3
    highlight-style: pygments
    page-layout: article
engine: knitr

editor_options: 
  markdown: 
    wrap: 60
---

```{r setup}
#| warning: false
#| message: false
#| include: false
#| echo: false
#| comment: NA

options(repos = c(CRAN = "https://cloud.r-project.org"),
        htmltools.dir.version = FALSE, 
        htmltools.preserve.raw = FALSE
        )

knitr::opts_chunk$set(
  echo = TRUE, 
  message = FALSE, 
  warning = FALSE,
  error = FALSE, 
  comment = NA, 
  tidy.opts = list(width.cutoff = 60)
  ) 

#install.packages("easypackages")
#pak::pkg_install(c(
#libs = c(
easypackages::packages(
  "bslib", 
  "cols4all", "covr", "cowplot", 
  "dendextend", "digest","DiagrammeR","dtwclust", "downlit", 
  "e1071", "exactextractr","elevatr", 
  "FNN", "future", 
  "gdalcubes", "gdalUtilities", "geojsonsf", "geos", "ggplot2", "ggstats", 
  "ggspatial", "ggmap", "ggplotify", "ggpubr", "ggrepel", "giscoR", 
  "hdf5r", "httr", "httr2", "htmltools",
  "jsonlite", 
  "kohonen", 
  "leaflet.providers", "leafem", "libgeos","luz","lwgeom", "leaflet", "leafgl",
  "mapedit", "mapview", "maptiles", "methods", "mgcv", 
  "ncdf4", "nnet", 
  "openxlsx", "parallel", "plotly", 
  "randomForest", "rasterVis", "raster", "Rcpp", "RcppArmadillo", 
  "RcppCensSpatial","rayshader", "RcppEigen", "RcppParallel", 
  "RColorBrewer", "reactable", "rgl", "rsconnect","RStoolbox", "rts", 
  "s2", "sf", "scales", "sits","spdep", "stars", "stringr","supercells", 
  "terra", "testthat", "tidyverse", "tidyterra","tools", 
  "tmap", "tmaptools", "terrainr", 
  "xgboost",
  prompt = F)

#installed_libs <- libs %in% rownames(installed.packages())
#if(any(installed_libs == F)){install.packages(libs[!installed_libs])}
#invisible(lapply(libs, library, character.only = T))

#lib = .libPaths()[[1L]], upgrade = F, ask = F, dependencies = T)
#mapviewOptions(fgb = FALSE)
sf::sf_use_s2(use_s2 = FALSE)
```

```{css, echo=FALSE, class.source = 'foldable'}
div.column {
    display: inline-block;
    vertical-align: top;
    width: 50%;
}

#TOC::before {
  content: "";
  display: block;
  height:200px;
  width: 200px;
  background-image: url('https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/01-site-map.png');
  background-size: contain;
  background-position: 50% 50%;
  padding-top: 80px !important;
  background-repeat: no-repeat;
}
```

# Field Maps

## 1. Import AOI

```{r site-aoi}
#| warning: false
#| message: false
#| eval: true
#| echo: true
#| comment: NA

crs_master = sf::st_crs('epsg:4326')
aoi_site   = sf::read_sf("./assets/inputs/chilwa_watershed_4326.shp") |>
  sf::st_cast() |> sf::st_transform(crs_master)
bbox_site  = terrainr::add_bbox_buffer(aoi_site, 20000, "meters")
vbox_site = terra::vect(bbox_site)

tmap::tmap_mode("view")
tmap::tm_shape(aoi_site) +
  tmap::tm_borders(col = "red") +
  tmap::tm_basemap("Esri.WorldImagery")
```

Figure 2: Interactive map showing project boundary and
ESRI's basemap

## 2. Import Basemap

```{r site-basemap, cache=T}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| comment: NA

# zoom = 12 sources basemap at scale of 1:150,000
basemap_150k = maptiles::get_tiles(
  bbox_site, 
  zoom      = 10, 
  crop      = T,
  provider  = "OpenTopoMap"
)

tmap::tmap_mode("view")
tmap::tm_shape(basemap_150k) + tmap::tm_rgb() + 
  tmap::tm_shape(aoi_site) +
  tmap::tm_borders(col="red")
```

Figure 3: Site map showing project boundary and downloaded
basemap `OpenTopoMap`

## 3. Build Map

```{r customize-site-map}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA
tmap::tmap_mode("plot")
site_map = tmap::tm_shape(basemap_150k) + tmap::tm_rgb() + 
  tmap::tm_shape(aoi_site) +
  tmap::tm_borders(lwd = 1, col = "red") +
  tmap::tm_graticules(lines=T,labels.rot=c(0,90),lwd=0.2) +
  tmap::tm_credits("EPSG:4326", position = c("left", "bottom")) +
  tmap::tm_scale_bar(
    c(0, 10, 20, 40), 
    position = c("RIGHT", "BOTTOM"), 
    text.size = .5
    ) +
  tmap::tm_compass(
    type = "4star", size = 1.5,
    color.dark = "gray60", text.color = "gray60",
    position = c("left", "top")
    ) 
```

## 4. Save output

```{r save-site-map}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

# `width` & `height` controls output resolution 
# `dpi` controls size of map attributes relative to output resolution
tmap::tmap_save(
  site_map, "/Users/seamus/Repos/map-templates/assets/outputs/01-site-draft.png", 
  width=15120, height=15120, asp=0, dpi=600
  )
```

![Figure 4: Site Map rendered with customized attributes and
resolution
(15120x15120pixels)](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/01-site-map.png)

# Locator Maps

## 1. Import AOI

```{r locator-map}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| comment: NA

aoi_country = giscoR::gisco_get_countries(country = "Malawi", resolution = "3") |>
  st_cast() |> st_transform(crs_master)
aoi_region = giscoR::gisco_get_countries(
  country = c("Malawi", "Zambia", "Tanzania", "Mozambique"), resolution = "3") |>
  st_cast() |> st_transform(crs_master)

bbox_site  = terrainr::add_bbox_buffer(aoi_site, 20000, "meters")
bbox_country = terrainr::add_bbox_buffer(aoi_country, 40000, "meters")
bbox_region = terrainr::add_bbox_buffer(aoi_region, 80000, "meters")

vbox_site = vect(bbox_site)
vbox_region = vect(bbox_region)
vbox_country = terra::vect(terra::ext(vect(aoi_country)) * 1.3) |> sf::st_as_sf()
sf::st_crs(vbox_country) <- "epsg:4326" 

# Interactive map mode: "view" 
tmap::tmap_mode("view")
tmap::tm_shape(vbox_country) +
  tmap::tm_borders(lwd = 2, col = "green") +
  tmap::tm_shape(aoi_region) +
  tmap::tm_borders(lwd = 1, col = "blue") +
  tmap::tm_shape(aoi_site) +
  tmap::tm_borders(lwd = 2, col = "red")
```

Figure 2: Interactive map showing site boundary, national
borders, and national bounding box

## 2. Import Basemap

```{r locator-basemap}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

# zoom = 8 returns scale of 1:2,000,000
basemap_4m = maptiles::get_tiles(
  bbox_region, 
  zoom      = 8, 
  crop      = T,
  provider  = "CartoDB.Positron"
)

tmap::tmap_mode("plot")
country_map = tmap::tm_shape(vbox_country) + tm_borders(lwd = 0.0, col = "black") +
  tmap::tm_shape(basemap_4m) + tm_rgb(alpha=0.2) + 
  tmap::tm_shape(aoi_site) + tm_borders(lwd=2, col = "red", fill="#e28672", fill_alpha=0.5) +
  tmap::tm_shape(aoi_region) + tm_borders(lwd = 0.5, col = "black") +
  tmap::tm_compass(type="4star", size=1.1, color.dark = "gray60", text.color="gray60",position=c("LEFT", "TOP")
    ) 

tmap::tmap_save(country_map, 
                "/Users/seamus/Repos/map-templates/assets/outputs/02-country-map.png"
                )
country_map
```

![Figure 3: Interactive map showing site boundary, national
borders, and downloaded
basemap.](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/02-country-map.png)

## 3. Build Map

```{r customize-locator-map}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

main_map = tmap::tmap_grob(site_map)
inset_map = tmap::tmap_grob(country_map)

locator_map = ggdraw() +
  draw_plot(main_map) +
  draw_plot(inset_map, x = -0.39, y=0.4, height = 0.45)
```

## 4. Save output

```{r output-map}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

ggsave(locator_map, 
       "/Users/seamus/Repos/map-templates/assets/outputs/03-locator-map.png"
       )
```

![Figure 4: Locator map showing site area and location at
1:4,000,000 & 1:150,000
scales](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/outputs/03-locator-map.png)

### Runtime Log

```{r seesion-info}
devtools::session_info()
```
