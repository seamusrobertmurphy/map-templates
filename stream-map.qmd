---
title: "Riparian Maps"
execute:
  echo: true
format:
  html:
    toc: true
    toc-location: right
    highlight-style: pygments
    page-layout: article

editor_options: 
  markdown: 
    wrap: 60
---

```{r setup}
#| warning: false
#| message: false
#| include: false
#| echo: false
#| comment: NA

#install.packages("easypackages")
pacman::p_load(
  "bslib",
  "caret", "cli", "cols4all", "covr", "cowplot",
  "dendextend", "digest", "DiagrammeR", "dtwclust", "downlit",
  "e1071", "exactextractr", "elevatr",
  "FNN", "future",
  "gdalcubes", "gdalUtilities", "geojsonsf", "geos", "geodata", 
  "ggplot2", "ggstats","ggspatial", "ggmap", "ggplotify", "ggpubr", "ggrepel", "giscoR",
  "hdf5r", "httr", "httr2", "htmltools",
  "jsonlite",
  "kohonen",
  "leafem", "leaflet.providers", "libgeos", "luz", "lwgeom", "leaflet", "leafgl",
  "mapedit", "mapview", "maptiles", "methods", "mgcv",
  "ncdf4", "nnet",
  "openxlsx",
  "parallel", "plotly", "proj4", "PROJ",
  "randomForest", "rasterVis", "raster", "rayshader",
  "Rcpp", "RcppArmadillo",
  "RcppCensSpatial", "rayshader", "RcppEigen", "RcppParallel",
  "RColorBrewer", "reactable", "rgl", "rsconnect", "RStoolbox", "rts",
  "s2", "sf", "scales", "sits", "spdep", "stars", "stringr", "supercells",
  "terra", "testthat", "tidyverse", "tidyterra", "tools",
  "tmap", "tmaptools", "terrainr",
  "xgboost"
)

knitr::opts_chunk$set(
  echo = TRUE, message = FALSE, warning = FALSE,
  error = FALSE, comment = NA, tidy.opts = list(width.cutoff = 6)
)
options(htmltools.dir.version = FALSE, htmltools.preserve.raw = FALSE)
tmap::tmap_options(component.autoscale=F,
  max.raster = c(plot = 800000, view = 8000000))

mapviewOptions(fgb = FALSE)
sf::sf_use_s2(use_s2 = FALSE)
```

```{css, echo=FALSE, class.source = 'foldable'}
div.column {
    display: inline-block;
    vertical-align: top;
    width: 50%;
}

#TOC::before {
  content: "";
  display: block;
  height:200px;
  width: 200px;
  background-image: url('assets/outputs/06-watershed-3D.png');
  background-size: contain;
  background-position: 50% 50%;
  padding-top: 80px !important;
  background-repeat: no-repeat;
}
```

-   Declare aoi, extent & projection
-   Download hydro data
-   Download DEM
-   Render 2D map
-   Render 3D map
-   Save output

## 1. AOI's & projection[^1]

```{r pop-aoi}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA
library(sf)

aoi_00 = geodata::gadm(
  country="CAN", level=0, 
  path="./assets/SHP/") |> 
  sf::st_as_sf()

aoi_01  = geodata::gadm(
  country="CAN", level=1, 
  path="./assets/SHP/") |> 
  sf::st_as_sf()

aoi_02  = geodata::gadm(
  country="CAN", level=2, 
  path="./assets/SHP/") |> 
  sf::st_as_sf()

aoi_03  = geodata::gadm(
  country="CAN", level=3, 
  path="./assets/SHP/") |> 
  sf::st_as_sf()

sf::st_write(aoi_00, "./assets/SHP/aoi_00.shp", delete_dsn = T)
sf::st_write(aoi_01, "./assets/SHP/aoi_01.shp", delete_dsn = T)
sf::st_write(aoi_02, "./assets/SHP/aoi_02.shp", delete_dsn = T)
sf::st_write(aoi_03, "./assets/SHP/aoi_03.shp", delete_dsn = T)
crs_master = sf::st_crs(aoi_country) 
# -------------------------------------------- #
# Avoid if possible, but if reprojection needed:
# crs_master <- sf::st_crs("epsg:4326")
# -------------------------------------------- #
```

```{r watershed-api}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

aoi_00 = sf::st_read("./assets/SHP/aoi_00.shp") 
aoi_01 = sf::st_read("./assets/SHP/aoi_01.shp") 
aoi_02 = sf::st_read("./assets/SHP/aoi_02.shp") 
aoi_03 = sf::st_read("./assets/SHP/aoi_03.shp") 
names(aoi_00)
names(aoi_01)
names(aoi_02)
names(aoi_03)
unique(aoi_00$NAME_1)  
unique(aoi_01$NAME_1)  
unique(aoi_02$NAME_1)  
unique(aoi_03$NAME_1)  
dplyr::glimpse(aoi_00)
dplyr::glimpse(aoi_01)
dplyr::glimpse(aoi_02)
dplyr::glimpse(aoi_03)

bc_province  = aoi_01 |> dplyr::filter(NAME_1 == "British Columbia")
bc_districts = aoi_02 |> dplyr::filter(NAME_1 == "British Columbia")
bc_counties  = aoi_03 |> dplyr::filter(NAME_1 == "British Columbia")

devtools::install_github("joelgombin/concaveman") # repo build fails
pak::pak("joelgombin/concaveman") # pak() always figures it out

island_extent = sf::st_bbox(c(
  xmin = -129.5, ymin = 48.1, 
  xmax = -123.0, ymax = 51.0), 
  crs = st_crs(bc_province)) |> 
  sf::st_as_sfc() 

island_districts = aoi_02 |> 
  dplyr::filter(NAME_1 == "British Columbia") |>
  sf::st_filter(island_extent, .predicate=sf::st_intersects) |>
  sf::st_union() |> 
  concaveman::concaveman(concavity = 3) |> # sharper snapping
  sf::st_intersection(bc_province) |> 
  sf::st_as_sf() |>
  sf::st_cast()

island_counties = aoi_03 |> 
  dplyr::filter(NAME_1 == "British Columbia") |>
  sf::st_filter(island_extent, .predicate=sf::st_intersects) |>
  sf::st_union() |> 
  concaveman::concaveman(concavity = 3) |> # sharper smoothing
  sf::st_intersection(bc_province) |> 
  sf::st_as_sf() |>
  sf::st_cast()

sf::st_write(island_districts, "./assets/SHP/island_districts.shp", delete_dsn=T)
sf::st_write(island_counties, "./assets/SHP/island_counties.shp", delete_dsn=T)

library(osmdata)
shoreline_clip <- osmdata::opq(bbox = sf::st_bbox(island_extent)) |>
  osmdata::add_osm_feature(key = "natural", value = "coastline") |>
  osmdata::osmdata_sf() |>
  {\(x) x$osm_lines}() |>
  sf::st_intersection(island_extent) |>
  sf::st_union() |>
  sf::st_polygonize() |>
  sf::st_collection_extract("POLYGON") |>
  sf::st_cast()

island_districts_clip <- sf::st_intersection(island_districts, shoreline_clip)
island_counties_clip <- sf::st_intersection(island_counties, shoreline_clip)
sf::st_write(island_districts_clip, "./assets/SHP/island_districts_clip.shp")
sf::st_write(island_counties_clip, "./assets/SHP/island_counties_clip.shp")
sf::st_write(shoreline_clip, "./assets/SHP/shoreline_clip.shp")

tmap::tmap_mode("view")
tmap::tm_shape(island_counties_clip) + tm_borders(lwd=0) +
  tmap::tm_shape(shoreline_clip) + tm_borders(col = "red", lwd=4) +
  tmap::tm_shape(island_districts_clip) + tm_borders(col = "turquoise", lwd=22) +
  tmap::tm_shape(island_counties_clip) + tm_borders(col = "purple", lwd=0.8)
```

```{r}
#| warning: false
#| message: false
#| error: false
#| echo: false
#| eval: true
#| comment: NA
tmap::tmap_mode("view")
island_districts_clip = sf::st_read("./assets/SHP/island_districts_clip.shp", quiet=T)
island_counties_clip = sf::st_read("./assets/SHP/island_counties_clip.shp", quiet=T)
shoreline_clip = sf::st_read("./assets/SHP/shoreline_clip.shp", quiet=T)
tmap::tm_shape(island_counties_clip) + tm_borders(lwd=0) +  
  tmap::tm_shape(shoreline_clip) + tm_borders(col = "red", lwd=4) +
  tmap::tm_shape(island_districts_clip) + tm_borders(col = "turquoise", lwd=22) +
  tmap::tm_shape(island_counties_clip) + tm_borders(col = "purple", lwd=0.8)
```

```{r}
#| message: false
#| warning: false
#| comment: NA
#| error: false
#| eval: false
#| echo: true
library(maptiles)
library(basemaps)
library(leaflet)
library(leaflet.providers)

# ------------------------------------------------------------------- #
# With AOI defined, we can extract a basemap to save time downstream  #
#  Check basemap library: `leaflet.providers::get_providers()`        #

basemap_500k = maptiles::get_tiles(island_districts, zoom=10, 
  crop= T,provider="Esri.WorldStreetMap",project=T,verbose=T)

basemap_250k = maptiles::get_tiles(island_districts, zoom = 11,
  crop = T,provider = "OpenStreetMap",project=T, verbose = T)

basemap_150k = maptiles::get_tiles(island_districts, zoom=12, 
  crop= T,provider="Esri.WorldStreetMap",project=T,verbose=T)

basemap_70k = maptiles::get_tiles(island_districts, zoom=13, 
  crop= T,provider="Esri.WorldStreetMap",project=T,verbose=T)

writeRaster(basemap_70k, "./assets/TIF/basemap_70k.tif", overwrite=T)
writeRaster(basemap_150k, "./assets/TIF/basemap_150k.tif", overwrite=T)
writeRaster(basemap_250k, "./assets/TIF/basemap_250k.tif", overwrite=T)
writeRaster(basemap_500k, "./assets/TIF/basemap_500k.tif", overwrite=T)

# ----------- #
# Static Map  #
tmap::tmap_mode("plot")
tmap::tm_shape(island_counties) + tm_borders(lwd=0) +  # placeholder for zoom
  tmap::tm_shape(basemap_500k) + tmap::tm_rgb() +
  tmap::tm_shape(island_districts) + tm_borders(col = "turquoise", lwd=1.2) +
  tmap::tm_shape(island_counties) + tm_borders(col = "purple", lwd=0.8) +
  tmap::tm_graticules(lines = T, labels.rot= c(0, 90), lwd= 0.1) +
  tmap::tm_scalebar(position=c("RIGHT", "BOTTOM"), text.size=.5) +
  tmap::tm_compass(color.dark="gray60",text.color="gray60",position=c("RIGHT", "top"))+
  tmap::tm_credits(text="EPSG:4326",color="gray60",size=.5,position=c("left","BOTTOM"))+
  tmap::tm_layout(
    main.title        = "Island Shoreline Delineation",
    title.position    = ("top"),
    legend.position   = c("left", "bottom"),
    legend.text.size  = 0.9,
    legend.title.size = 0.9
    ) -> tm_island_static
  
# --------------- #
# Interactive Map #
tmap::tmap_mode("view")
tmap::tm_shape(island_counties) + tm_borders(lwd=0) +  # placeholder for framing
  tmap::tm_shape(basemap_250k) + tmap::tm_rgb() +
  tmap::tm_shape(island_districts) + tm_borders(col = "turquoise", lwd=1.2) +
  tmap::tm_shape(island_counties) + tm_borders(col = "purple", lwd=0.8) +
  #tmap::tm_graticules(lines = T, labels.rot= c(0, 90), lwd= 0.1) +
  tmap::tm_scalebar(position=c("RIGHT", "BOTTOM"), text.size=.5) +
  tmap::tm_compass(color.dark="gray60",text.color="gray60",position=c("RIGHT", "top")) +
  tmap::tm_credits(text="EPSG:4326",color="gray60",
    size=.5,position=c("left","BOTTOM")) +
  tmap::tm_layout(
    main.title        = "Island Shoreline Delineation",
    title.position    = ("top"),
    legend.position   = c("left", "bottom"),
    legend.text.size  = 0.9,
    legend.title.size = 0.9
    ) -> tm_island_live

tmap::tmap_save(tm_island_static, "./assets/MAP/08-island-shoreline.png")
#tmap::tmap_arrange(ncol=2, tm_island_live, tm_island_static)
```

```{r}
#| message: false
#| warning: false
#| comment: NA
#| error: false
#| eval: false
#| echo: true

tmap::tmap_mode("plot")
tmap::tm_shape(island_counties) + tm_borders(lwd=0) +  # placeholder for zoom
  tmap::tm_shape(basemap_500k) + tmap::tm_rgb() +
  tmap::tm_shape(island_districts) + tm_borders(col = "turquoise", lwd=1.2) +
  tmap::tm_shape(island_counties) + tm_borders(col = "purple", lwd=0.8) +
  tmap::tm_graticules(lines = T, labels.rot= c(0, 90), lwd= 0.1) +
  tmap::tm_scalebar(position=c("RIGHT", "BOTTOM"), text.size=.5) +
  tmap::tm_compass(color.dark="gray60",text.color="gray60",position=c("RIGHT", "top"))+
  tmap::tm_credits(text="EPSG:4326",color="gray60",size=.5,position=c("left","BOTTOM"))+
  tmap::tm_layout(
    main.title        = "Island Shoreline Delineation",
    title.position    = ("top"),
    legend.position   = c("left", "bottom"),
    legend.text.size  = 0.9,
    legend.title.size = 0.9
    ) -> tm_island_static
  

# Interactive Map #
tmap::tmap_mode("view")
tmap::tm_shape(island_counties) + tm_borders(lwd=0) +  # placeholder for zoom
  tmap::tm_shape(basemap_150k) + tmap::tm_rgb() +
  tmap::tm_shape(island_districts) + tm_borders(col = "turquoise", lwd=1.2) +
  tmap::tm_shape(island_counties) + tm_borders(col = "purple", lwd=0.8) +
  #tmap::tm_graticules(lines = T, labels.rot= c(0, 90), lwd= 0.1) +
  tmap::tm_scalebar(position=c("RIGHT", "BOTTOM"), text.size=.5) +
  tmap::tm_compass(color.dark="gray60",text.color="gray60",position=c("RIGHT", "top")) +
  tmap::tm_credits(text="EPSG:4326",color="gray60",
    size=.5,position=c("left","BOTTOM")) +
  tmap::tm_layout(
    main.title        = "Island Shoreline Delineation",
    title.position    = ("top"),
    legend.position   = c("left", "bottom"),
    legend.text.size  = 0.9,
    legend.title.size = 0.9
    ) -> tm_island_live

tmap::tmap_save(tm_island_static, "./assets/MAP/08-island-shoreline.png")
#tmap::tmap_arrange(ncol=2, tm_island_live, tm_island_static)
```

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| error: false
#| comment: NA


basemap_70k = terra::rast("./assets/TIF/basemap_70k.tif", overwrite=T)
basemap_150k = terra::rast("./assets/TIF/basemap_150k.tif", overwrite=T)
basemap_250k = terra::rast("./assets/TIF/basemap_250k.tif", overwrite=T)
basemap_500k = terra::rast("./assets/TIF/basemap_500k.tif", overwrite=T)

sf::st_write(island_districts, "./assets/SHP/island_districts_clip.shp", delete_dsn=T)
sf::st_write(island_counties, "./assets/SHP/island_counties_clip.shp", delete_dsn=T)
sf::st_write(shoreline, "./assets/SHP/shoreline_clip.shp", delete_dsn=T)

bc_province  = aoi_01 |> dplyr::filter(NAME_1 == "British Columbia")
bc_districts = aoi_02 |> dplyr::filter(NAME_1 == "British Columbia")
bc_counties  = aoi_03 |> dplyr::filter(NAME_1 == "British Columbia")

aoi_00 = sf::st_read("./assets/SHP/aoi_00.shp") 
aoi_01 = sf::st_read("./assets/SHP/aoi_01.shp") 
aoi_02 = sf::st_read("./assets/SHP/aoi_02.shp") 
aoi_03 = sf::st_read("./assets/SHP/aoi_03.shp") 

```

```{r}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

dem_site = elevatr::get_elev_raster(
  locations = watershed_site,
  z = 10, clip = "locations")

dem_site = dem_site |>
  terra::rast() |>
  terra::project(crs(watershed_site))

names(dem_site)[1] <- "Elevation (m asl)"

tmap::tm_shape(dem_site) + tmap::tm_raster(palette = "Greens") +
  tmap::tm_shape(rivers_site) + tm_lines(col = "steelblue") +
  tmap::tm_shape(lakes_site) + tm_fill ("steelblue") +
  tmap::tm_shape(watershed_site) + tm_borders(col = "red", lwd=1)


# Robust API: https://doi-usgs.github.io/nhdplusTools/reference/download_wbd.html
# Syntax: https://rdrr.io/cran/nhdplusTools/man/download_wbd.html
remotes::install_github("DOI-USGS/nhdplusTools") # Debug with devtools::build() & last resort = docker image
library(nhdplusTools)

11, 18, 25, 26, 27, 28

aoi_country <- giscoR::gisco_get_countries(
  country = "Canada", resolution = "3") |>
  sf::st_cast() |> sf::st_transform(crs_master)

```

##### Figure 1: Interactive map showing area of interest polygons (AOI)

## 2. Download hydro data

```{r watershed-inputs, eval=F}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

#url_rivers <- "https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_shp.zip"
#url_lakes <- "https://data.hydrosheds.org/file/hydrolakes/HydroLAKES_polys_v10_shp.zip"
#url_watersheds <- "https://data.hydrosheds.org/file/hydrobasins/customized_with_lakes/hybas_lake_af_lev01-12_v1c.zip"
# download.file(url = url, path = getwd(), destfile = file_name)

rivers   = terra::vect("./assets/inputs/hydro/HydroRIVERS_v10.shp") 
lakes    = terra::vect("./assets/inputs/hydro/HydroLAKES_polys_v10.shp") 
watershed= terra::vect("./assets/inputs/hydro/hybas_lake_af_lev04_v1c.shp")

rivers_country = terra::crop(rivers, aoi_country) |> 
  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)
rivers_site = terra::crop(rivers, aoi_site) |> 
  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)

lakes_country = terra::crop(lakes, aoi_country) |> 
  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)
lakes_site = terra::crop(lakes, aoi_site) |> 
  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)

watershed_country = terra::crop(watershed, aoi_country) |> 
  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)
watershed_site = terra::crop(watershed, aoi_site) |> 
  sf::st_as_sf() |> sf::st_cast() |> sf::st_transform(crs_master)

#rivers_country     = sf::st_intersection(rivers, aoi_country)
#rivers_site        = sf::st_intersection(rivers, aoi_site)
#lakes_country      = sf::st_intersection(lakes, aoi_country)
#lakes_site         = sf::st_intersection(lakes, aoi_site)
#watershed_country  = sf::st_intersection(watershed, aoi_country)
#watershed_site     = sf::st_intersection(watershed, aoi_site)
# reproject if NAs outputed, caution of long processing time
# watersheds <- terra::project(watersheds, crs(aoi_site))

# save extracted layers for faster runtime
sf::st_write(rivers_country, "./assets/inputs/rivers_country.shp")
sf::st_write(rivers_site, "./assets/inputs/rivers_site.shp")
sf::st_write(lakes_country, "./assets/inputs/lakes_country.shp")
sf::st_write(lakes_site, "./assets/inputs/lakes_site.shp")
sf::st_write(watershed_country, "./assets/inputs/watershed_country.shp")
sf::st_write(watershed_site, "./assets/inputs/watershed_site.shp")

tmap::tm_shape(rivers_site) + tm_lines(col = "steelblue") +
  tmap::tm_shape(lakes_site) + tm_fill ("steelblue") +
  tmap::tm_shape(watershed_site) + tm_borders(col = "red", lwd=1)
```

```{r watershed-extracted, echo=F}
#| warning: false
#| message: false
#| echo: false
#| eval: true

rivers_country = sf::st_read("./assets/inputs/rivers_country.shp") |> st_cast("LINESTRING")
rivers_site    = sf::st_read("./assets/inputs/rivers_site.shp") |> st_cast("LINESTRING")
lakes_country  = sf::st_read("./assets/inputs/lakes_country.shp") |> st_cast("POLYGON")
lakes_site     = sf::st_read("./assets/inputs/lakes_site.shp") |> st_cast("POLYGON")
watershed_site = sf::st_read("./assets/inputs/watershed_site.shp") |> st_cast("POLYGON")

tmap::tm_shape(rivers_site) + tm_lines(col = "steelblue") +
  tmap::tm_shape(lakes_site) + tm_fill ("steelblue") +
  tmap::tm_shape(watershed_site) + tm_borders(col = "red", lwd=1)
```

##### Figure 2: Interactive map showing extracted hydrographic layers

## 3. Download DEM

```{r watershed-dem}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| comment: NA

dem_site = elevatr::get_elev_raster(
  locations = watershed_site,
  z = 10, clip = "locations")

dem_site = dem_site |>
  terra::rast() |>
  terra::project(crs(watershed_site))

names(dem_site)[1] <- "Elevation (m asl)"

tmap::tm_shape(dem_site) + tmap::tm_raster(palette = "Greens") +
  tmap::tm_shape(rivers_site) + tm_lines(col = "steelblue") +
  tmap::tm_shape(lakes_site) + tm_fill ("steelblue") +
  tmap::tm_shape(watershed_site) + tm_borders(col = "red", lwd=1)
```

##### Figure 3: Interactive map showing digital elevation model and hydrographic layers.

## 4. Build 3D map

```{r watershed-render}
#| warning: false
#| message: false
#| echo: true
#| eval: false
#| comment: NA

rivers_strahler = rivers_site |>
  dplyr::mutate(
    width = as.numeric(
      ORD_FLOW
    ),
    width = dplyr::case_when(
      width == 3 ~ 16,
      width == 4 ~ 14,
      width == 5 ~ 12,
      width == 6 ~ 10,
      width == 7 ~ 6,
      TRUE ~ 0
    )
  ) |>
  sf::st_as_sf() |>
  sf::st_transform(crs = "epsg:4326")

h <- nrow(dem_site)
w <- ncol(dem_site)

dem_matrix = rayshader::raster_to_matrix(dem_site)

dem_matrix |>
  rayshader:: height_shade() |>
  rayshader::add_overlay(
    rayshader::generate_line_overlay(
      geometry   = rivers_strahler,
      extent     = dem_site,
      heightmap  = dem_matrix,
      color      = "#387B9C",
      linewidth  = rivers_strahler$width,
      data_column_width = "width"
      ), alphalayer = 1
    ) |>
  rayshader::add_overlay(
    rayshader::generate_line_overlay(
      geometry   = lakes_site,
      extent     = dem_site,
      heightmap  = dem_matrix,
      color      = "#387B9C"
      ), alphalayer = 1
    ) |>
  rayshader::plot_3d(
    dem_matrix,
    zscale       = 14,
    solid        = T,
    shadow       = T,
    shadow_darkness = 2,
    background   = "white",
    windowsize   = c(600, 600),
    zoom         = 0.6,
    phi          = 40,
    theta        = 0 
  )
```

## 5. Render 3D map

```{r watershed-save}
#| eval: false

rayshader::render_highquality(
  preview        = T,
  light          = F,
  lightdirection = c(135, 45),
  lightcolor = c("white"),
  lightaltitude = 25,
  ambient_light = 0.1,
  rotate_env     = 0.4,
  intensity_env  = 0.85,
  interactive    = F,
  parallel       = T,
  width          = w,
  height         = h,
  backgroundhigh="#FFFFFF",
  backgroundlow="#FFFFFF"
  )
```

![Figure 4: Three-dimensional map of Lake Chilwa
watershed](assets/outputs/06-watershed-3D.png)

```{r session-info}
#| eval: true
devtools::session_info()
```

[^1]: zoom = 11 = 1:150,000 scale -
    <https://wiki.openstreetmap.org/wiki/Zoom_levels>
