---
title: "Topography Maps"
execute:
  echo: true
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    highlight-style: pygments
    page-layout: article

editor_options: 
  markdown: 
    wrap: 60
---

```{r setup}
#| warning: false
#| message: false
#| include: false
#| echo: false
#| comment: NA

#install.packages("easypackages")
pacman::p_load(
  "bcdata", "bslib",
  "cli", "cols4all", "covr", "cowplot",
  "dendextend", "digest", "DiagrammeR", "dtwclust", "downlit",
  "exactextractr", "elevatr",
  "FNN", "future", "flowdem",
  "gdalUtilities", "geojsonsf", "geos", "geodata", 
  "ggplot2", "ggstats","ggspatial", "ggmap", 
  "ggplotify", "ggpubr", "ggrepel", "giscoR",
  "hdf5r", "httr", "httr2", "htmltools",
  "jsonlite",
  "leafem", "leaflet.providers", "libgeos", "luz", "lwgeom", "leaflet", "leafgl",
  "mapedit", "mapview", "maptiles", "methods", "mgcv",
  "ncdf4", "nnet",
  "openxlsx",
  "parallel", "plotly", "proj4", "PROJ",
  "randomForest", "rasterVis", "raster",
  "rayshader", "rayvertex", 
  "RColorBrewer", "rgl", "rsconnect", "RStoolbox", "rts",
  "s2", "sf", "scales", "spdep", "stars", "stringr", "supercells",
  "terra", "testthat", "tidyverse", "tidyterra", "tools",
  "tmap", "tmaptools", "terrainr",
  "xgboost"
)

knitr::opts_chunk$set(
  echo    = T, 
  error   = F, 
  message = F, 
  warning = F,
  comment = NA, 
  tidy.opts = list(
    width.cutoff = 60)
  )

options(
  htmltools.dir.version = F, 
  htmltools.preserve.raw = F)

tmap::tmap_options(
  component.autoscale=F,
  max.raster = c(plot=8000000, view=10000000)
  )

mapviewOptions(fgb = FALSE)
sf::sf_use_s2(use_s2 = FALSE)
```

```{css, echo=FALSE, class.source = 'foldable'}
div.column {
    display: inline-block;
    vertical-align: top;
    width: 50%;
}

#TOC::before {
  content: "";
  display: block;
  height:200px;
  width: 200px;
  background-image: url('https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/MAP/stream_map_high_b.png');
  background-size: contain;
  background-position: 50% 50%;
  padding-top: 80px !important;
  background-repeat: no-repeat;
}
```

## 1. Import AOI

```{r aoi-import}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| comment: NA

crs_master = sf::st_crs('EPSG:3857')
aoi   = sf::read_sf("./assets/inputs/chilwa_watershed_4326.shp") |>
  sf::st_cast() |> sf::st_transform(crs_master)
bbox_aoi  = terrainr::add_bbox_buffer(aoi, 20000, "meters")
vbox_aoi = terra::vect(bbox_aoi)

tmap::tmap_mode("view")
tmap::tm_shape(aoi) +
  tmap::tm_borders(col = "red") +
  tmap::tm_basemap("Esri.WorldImagery")
```

## 2. Process DEM

**Note:** More efficient conditioning algorithms available
with `RichDEM` library [^1]

```{r}
#| comment: NA
#| warning: false
#| message: false
#| eval: false
#| echo: true

# z = 12: 1-Arc Second 
# z = 11: 3-Arc Second 
# z = 10: 5-Arc Second 

dem = elevatr::get_elev_raster(aoi, z=10,clip="locations")|>
  terra::rast() |> terra::crop(terra::vect(aoi)) 

#Process DEM by breaching & filling depressions & flats
dem_condt  = dem |> 
  flowdem::breach() |>
  flowdem::fill(epsilon=T) 
  #flowdem::fill_basins() # costal drainage basins

# Calculate flow direction & accumulation
dem_dir = dem_condt |> flowdem::dirs(mode="d8")
dem_acc = dem_dir   |> flowdem::accum(mode="d8")

raster::writeRaster(dem_condt, "./assets/TIF/dem_5arc_condt_chilwa.tif", overwrite=T)
raster::writeRaster(dem_dir, "./assets/TIF/dem_5arc_dir_chilwa.tif", overwrite=T)
raster::writeRaster(dem_acc, "./assets/TIF/dem_5arc_acc_chilwa.tif", overwrite=T)

tmap::tmap_mode("plot")
tmap::tm_shape(dem_condt) + 
  tmap::tm_raster(
    col.scale = tm_scale_continuous(values = terrain.colors(7)),
    col.legend = tm_legend(title = "Elevation (m)", reverse = T)) + 
  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +
  tmap::tm_scalebar(position = c("LEFT", "BOTTOM"), text.size = 0.5) + 
  tmap::tm_compass(color.dark="gray60",text.color="gray60",position=c("top","left"))
```

```{r}
#| comment: NA
#| warning: false
#| message: false
#| error: false
#| echo: false
#| eval: true

dem = terra::rast("./assets/TIF/dem_5arc_condt_chilwa.tif")

tmap::tmap_mode("plot")
tmap::tm_shape(dem_condt) + 
  tmap::tm_raster(
    col.scale = tm_scale_continuous(values = terrain.colors(7)),
    col.legend = tm_legend(title = "Elevation (m)", reverse = T)) + 
  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +
  tmap::tm_scalebar(position = c("LEFT", "BOTTOM"), text.size = 0.5) + 
  tmap::tm_compass(color.dark="gray60",text.color="gray60",position=c("top","left"))
```


## 3. Delineate Streams

```{r}
#| comment: NA
#| warning: false
#| message: false
#| eval: false
#| echo: true
# Calculate Flow Accumulation Distribution
par(mfrow = c(2, 2))
thresholds <- c(1, 2, 10, 20, 50, 100)

for(thresholds in c(1, 2, 10, 20, 50, 100)) {
  count <- sum(acc_values >= thresholds, na.rm = TRUE)
   percent <- (count / length(acc_values)) * 100
   cat("Threshold", thresholds, ":", count, "cells (", round(percent, 2), "%)\n")
}

acc_values <- values(dem_acc, na.rm = TRUE)
quantile(acc_values, probs = c(0.5, 0.9, 0.95, 0.99, 0.995, 0.999), na.rm = TRUE)
upper_limit <- quantile(acc_values, 0.99, na.rm = TRUE)
acc_subset <- acc_values[acc_values <= upper_limit]
low_vals <- acc_values[acc_values <= 10 & acc_values >= 2]
med_vals <- acc_values[acc_values <= 50 & acc_values >= 2]
high_vals <- acc_values[acc_values <= 100 & acc_values >= 2]
hist(low_vals, breaks = 10, main = "Flow Accumulation: 1-10", xlab = "Accumulation")
hist(med_vals, breaks = 25, main = "Flow Accumulation: 1-50", xlab = "Accumulation")
hist(high_vals, breaks = 50, main = "Flow Accumulation: 1-100", xlab = "Accumulation")
#hist(acc_subset, breaks = 500, main="Flow Accumulation (<99%)", xlab="Flow Accumulation")
hist(log10(acc_values+1),breaks=50,main="Log10 Accumulation)", xlab="Log10 Accumulation")

# Delineate streams using flow accumulation
streams_binary = dem_acc > 100
streams = sf::st_as_sf(as.polygons(streams_binary == 1))
st_write(streams, "./assets/SHP/streams_100.shp", delete_dsn=T)
```

```{r}
#| comment: NA
#| warning: false
#| message: false
#| error: false
#| echo: false
#| eval: true

par(mfrow = c(2, 2))
dem_acc   = terra::rast("./assets/TIF/dem_7arc_acc.tif")
dem_condt = terra::rast("./assets/TIF/dem_7arc_condt.tif")

acc_values <- values(dem_acc, na.rm = TRUE)
thresholds <- c(1, 2, 10, 20, 50, 100)
for(thresholds in c(1, 2, 10, 20, 50, 100)) {
  count <- sum(acc_values >= thresholds, na.rm = TRUE)
   percent <- (count / length(acc_values)) * 100
   cat("Threshold", thresholds, ":", count, "cells (", round(percent, 2), "%)\n")
   }

quantile(acc_values, probs = c(0.5, 0.9, 0.95, 0.99, 0.995, 0.999), na.rm = TRUE)
upper_limit <- quantile(acc_values, 0.99, na.rm = TRUE)
acc_subset <- acc_values[acc_values <= upper_limit]
low_vals <- acc_values[acc_values <= 10 & acc_values >= 2]
med_vals <- acc_values[acc_values <= 50 & acc_values >= 2]
high_vals <- acc_values[acc_values <= 100 & acc_values >= 2]
hist(low_vals, breaks = 10, main = "Flow Accumulation: 1-10", xlab = "Accumulation")
hist(med_vals, breaks = 25, main = "Flow Accumulation: 1-50", xlab = "Accumulation")
hist(high_vals, breaks = 50, main = "Flow Accumulation: 1-100", xlab = "Accumulation")
#hist(acc_subset, breaks = 500, main="Flow Accumulation (<99%)", xlab="Flow Accumulation")
hist(log10(acc_values+1),breaks=50,main="Log10 Accumulation)", xlab="Log10 Accumulation")
```

```{r}
#| comment: NA
#| warning: false
#| message: false
#| eval: false
#| echo: false

#url_rivers <- "https://data.hydrosheds.org/file/HydroRIVERS/HydroRIVERS_v10_shp.zip"
#url_lakes <- "https://data.hydrosheds.org/file/hydrolakes/HydroLAKES_polys_v10_shp.zip"
#url_watersheds <- "https://data.hydrosheds.org/file/hydrobasins/customized_with_lakes/hybas_lake_af_lev01-12_v1c.zip"
#download.file(url = url, path = getwd(), destfile = file_name)

crs_master = "EPSG:3005"
island_shoreline = sf::st_read("./assets/SHP/island_shoreline.shp", quiet=T)
rivers = sf::st_read("../datasets/HYDRO/Rivers/NAm/HydroRIVERS_v10_na.shp") |>
  dplyr::select(ORD_FLOW) |>   
  sf::st_intersection(island_shoreline) |>  
  sf::st_cast() |> 
  sf::st_transform(crs_master)

basins = sf::st_read("../datasets/HYDRO/Basins/hybas_lake_na_lev06_v1c.shp") |>
  dplyr::select(HYBAS_ID) |>   
  sf::st_intersection(island_shoreline) |>  
  sf::st_cast() |> 
  sf::st_transform(crs_master)

lakes = sf::st_read("../datasets/HYDRO/Lakes/HydroLAKES_polys_v10.shp") |>
  dplyr::select(Lake_name) |>   
  sf::st_intersection(island_shoreline) |>  
  sf::st_cast() |> 
  sf::st_transform(crs_master)

island_shoreline = sf::st_read("./assets/SHP/island_shoreline.shp", quiet=T)|> 
  sf::st_transform(crs_master)

sf::st_write(lakes, "./assets/SHP/lakes.shp", delete_dsn=T)
sf::st_write(basins, "./assets/SHP/basins.shp", delete_dsn=T)
sf::st_write(rivers, "./assets/SHP/streams.shp", delete_dsn=T)
```

## 4. Build Map

```{r}
#| comment: NA
#| message: false
#| warning: false
#| error: false
#| eval: false
#| echo: true

lakes = sf::st_read("./assets/SHP/lakes.shp") |> sf::st_cast("POLYGON")
basins= sf::st_read("./assets/SHP/basins.shp") |> sf::st_cast("MULTIPOLYGON")
rivers= sf::st_read("./assets/SHP/streams.shp")|> sf::st_cast("MULTILINESTRING")
dem   = terra::rast("./assets/TIF/dem_7arc_condt.tif") 
h <- nrow(dem)
w <- ncol(dem)

matrix = rayshader::raster_to_matrix(dem) 

matrix |>
  rayshader::height_shade() |>
  rayshader::add_overlay(
    rayshader::generate_line_overlay(
      geometry   = rivers,
      extent     = dem,
      heightmap  = matrix,
      color      = "turquoise",
      linewidth  = 3,
      ), alphalayer = 1
    ) |>
  rayshader::plot_3d(
    matrix,
    zscale       = 69,
    solid        = T,
    shadow       = T,
    shadow_darkness = 2,
    background   = "white",
    windowsize   = 800,
    zoom         = 0.6,
    phi          = 89.9,
    theta        = 0 
  )

#rayshader::render_snapshot(
#  rayvertex_lighting  = T,
#  rayvertex_lights    = 
#    rayvertex::directional_light(
#      intensity       = 1.5, 
#      color           = "#F3EEE1", 
#      direction       = c(-1.5,1,-1.5)
#      ),
#  rayvertex_shadow_map= T, 
#  software_render     = T
#  )
```

## 5. Render Map

```{r map-render}
#| comment: NA
#| warning: false
#| message: false
#| error: false
#| eval: false
#| echo: true

rayshader::render_highquality(
  samples           = 400, 
  sample_method     = "sobol", 
  parallel          = T, 
  environment_light = "kiara_1_dawn_2k.hdr", 
  light             = T, 
  width             = w, 
  height            = h,
  preview           = T, 
  interactive       = F,
  backgroundhigh="#FFFFFF",
  backgroundlow="#FFFFFF"
  )
```

![](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/MAP/stream_map_high_b.png)

```{r notes-render}
#| comment: NA
#| warning: false
#| message: false
#| eval: false
#| echo: false


# ------------------------------------------------- #

basins_line = rayshader::generate_polygon_overlay(
  geometry  = rivers, 
  heightmap = mat, 
  extent = terra::ext(dem_condt), 
  linewidth = 1
  )  
  
rivers_line = rayshader::generate_line_overlay(
  geometry  = rivers, 
  heightmap = mat, 
  extent = terra::ext(dem), 
  linewidth = 1, 
  color = "white"
  )  

mat |> rayshader::constant_shade(color = "lightgoldenrod") |> 
  rayshader::add_overlay(basins_line, alphalayer = 0.9) |>
  rayshader::add_overlay(rivers_line, alphalayer = 0.9)

rayshader::plot_3d(mat, 
  zscale    = 69, 
  windowsize= 800,
  theta     = 0,
  phi       = 89.9,
  zoom      = 0.9, 
  solid     = F, 
  lineantialias=F
  )
  
rayshader::render_highquality(
  samples       = 400, 
  sample_method = "sobol", 
  parallel      =T, 
  environment_light = "kiara_1_dawn_2k.hdr", 
  rotat_env = 135, 
  light = T, 
  width = 2000, 
  height = 2000, 
  preview = T, 
  interactive = F
  )


rayshader::render_snapshot(
  rayvertex_lighting = T,
  rayvertex_lights   = 
    rayvertex::directional_light(
      intensity = 1.5, 
      color = "#F3EEE1", 
      direction=c(-1.5,1,-1.5)
      ),
  rayvertex_shadow_map = T, software_render =T
  )

rayshader::render_highquality(
  samples       = 400, 
  sample_method = "sobol", 
  parallel      = T, 
  preview       = T,
  light         = F,
  lightdirection= c(135, 45),
  lightcolor = c("lightgoldenrod"),
  lightaltitude = 25,
  ambient_light = 0.1,
  rotate_env    = 135,
  intensity_env = 0.85,
  interactive   = F,
  parallel      = T,
  width         = w,
  height        = h,
  backgroundhigh= "#FFFFFF",
  backgroundlow = "#FFFFFF"
  )


```

```{r session-info}
#| eval: true
devtools::session_info()
```

[^1]: Breach-fill algorithm by Lindsay's paper (2016)
    "Efficient hybrid breaching-filling sink removal methods
    for flow path enforcement in digital elevation models:
    Efficient Hybrid Sink Removal Methods for Flow Path
    Enforcement: (Hydrological Processes 30, 846–857.
    doi:10.1002/hyp.10648) -\>
    `flowdem::comp_breach_lindsay2016(dem)`
