---
title: "Topography Maps"
execute:
  echo: true
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 3
    highlight-style: pygments
    page-layout: article

editor_options: 
  markdown: 
    wrap: 60
---

```{r setup}
#| warning: false
#| message: false
#| include: false
#| echo: false
#| comment: NA

#install.packages("easypackages")
pacman::p_load(
  "bcdata", "bslib",
  "cli", "cols4all", "covr", "cowplot",
  "dendextend", "digest", "DiagrammeR", "dtwclust", "downlit",
  "exactextractr", "elevatr",
  "FNN", "future", "flowdem",
  "gdalUtilities", "geojsonsf", "geos", "geodata", 
  "ggplot2", "ggstats","ggspatial", "ggmap", 
  "ggplotify", "ggpubr", "ggrepel", "giscoR",
  "hdf5r", "httr", "httr2", "htmltools",
  "jsonlite",
  "leafem", "leaflet.providers", "libgeos", "luz", "lwgeom", "leaflet", "leafgl",
  "mapedit", "mapview", "maptiles", "methods", "mgcv",
  "ncdf4", "nnet",
  "openxlsx",
  "parallel", "plotly", "proj4", "PROJ",
  "randomForest", "rasterVis", "raster",
  "rayshader", "rayvertex", 
  "RColorBrewer", "rgl", "rsconnect", "RStoolbox", "rts",
  "s2", "sf", "scales", "spdep", "stars", "stringr", "supercells",
  "terra", "testthat", "tidyverse", "tidyterra", "tools",
  "tmap", "tmaptools", "terrainr",
  "xgboost"
)

knitr::opts_chunk$set(
  echo    = T, 
  error   = F, 
  message = F, 
  warning = F,
  comment = NA, 
  tidy.opts = list(
    width.cutoff = 60)
  )

options(
  htmltools.dir.version = F, 
  htmltools.preserve.raw = F)

tmap::tmap_options(
  component.autoscale=F,
  max.raster = c(plot=8000000, view=10000000)
  )

mapviewOptions(fgb = FALSE)
sf::sf_use_s2(use_s2 = FALSE)
```

```{css, echo=FALSE, class.source = 'foldable'}
div.column {
    display: inline-block;
    vertical-align: top;
    width: 50%;
}

#TOC::before {
  content: "";
  display: block;
  height:200px;
  width: 200px;
  background-image: url('https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/MAP/stream_map_high_b.png');
  background-size: contain;
  background-position: 50% 50%;
  padding-top: 80px !important;
  background-repeat: no-repeat;
}
```

## 1. Import AOI & Hydrography

```{r aoi-import}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| comment: NA

crs_master= sf::st_crs('EPSG:3857')
rivers    = sf::st_read("./assets/inputs/rivers_site.shp", quiet=T) |> 
  sf::st_cast("LINESTRING") |> sf::st_transform(crs_master) 
lakes     = sf::st_read("./assets/inputs/lakes_site.shp", quiet=T)  |> 
  sf::st_cast("POLYGON") |> sf::st_transform(crs_master)
aoi       = sf::read_sf("./assets/inputs/chilwa_watershed_4326.shp", quiet=T) |> 
  sf::st_cast("POLYGON") |> sf::st_transform(crs_master)
bbox_aoi  = terrainr::add_bbox_buffer(aoi, 20000, "meters")
vbox_aoi  = terra::vect(bbox_aoi)

tmap::tmap_mode("view")
tmap::tm_shape(aoi) + tmap::tm_borders(col = "red") +
  tmap::tm_shape(rivers) + tm_lines(col = "turquoise", lwd=0.5) +
  tmap::tm_shape(lakes) + tm_fill("turquoise") +
  tmap::tm_basemap("Esri.WorldImagery")
```

## 2. Process DEM

**Note:** More efficient conditioning algorithms available
with `RichDEM` library [^1]

```{r}
#| comment: NA
#| warning: false
#| message: false
#| eval: false
#| echo: true

# z = 12: 1-Arc Second 
# z = 11: 3-Arc Second 
# z = 10: 5-Arc Second 

#Download and process DEM 
dem = elevatr::get_elev_raster(aoi, z=10,clip="locations")|>
  terra::rast() |> 
  terra::crop(terra::vect(aoi)) |>
  flowdem::breach() |>
  flowdem::fill(epsilon=T) 

slope_matrix <- matrix(c(
  0, 5, 1,    # <5%
  5, 10, 2,   # 5-10%
  10, 15, 3,  # 10-15%
  15, 20, 4,  # 15-20%
  20, 30, 5,  # 20-30%
  30, 100, 6  # 30-100% (since you clamped at 100)
), ncol=3, byrow=TRUE)

aspect_matrix <- matrix(c(
  0, 22.5, 1,      # North
  22.5, 67.5, 2,   # Northeast  
  67.5, 112.5, 3,  # East
  112.5, 157.5, 4, # Southeast
  157.5, 202.5, 5, # South
  202.5, 247.5, 6, # Southwest
  247.5, 292.5, 7, # West
  292.5, 337.5, 8, # Northwest
  337.5, 360, 1    # North (wraparound)
), ncol=3, byrow=TRUE)

slope_deg = terra::terrain(dem, v="slope", unit="degrees", neighbors=8)
slope_pct = base::tan(slope_deg * pi/180) * 100 
slope_pct = terra::clamp(slope_pct, lower=0, upper=100)
aspect_deg = terra::terrain(dem, v="aspect", unit="degrees", neighbors=8)

slope      = terra::classify(slope_pct, slope_matrix, include.lowest=TRUE)
aspect     = terra::classify(aspect_deg, aspect_matrix, include.lowest=T)

raster::writeRaster(dem, "./assets/TIF/dem_5arc_condt_chilwa.tif", overwrite=T)
raster::writeRaster(slope, "./assets/TIF/slope_5arc_condt_chilwa.tif", overwrite=T)
raster::writeRaster(aspect, "./assets/TIF/aspect_5arc_condt_chilwa.tif", overwrite=T)
```

## 3. Render Maps

```{r}
#| comment: NA
#| warning: false
#| message: false
#| error: false
#| echo: true
#| eval: true

dem   = terra::rast("./assets/TIF/dem_5arc_condt_chilwa.tif")
slope = terra::rast("./assets/TIF/slope_5arc_condt_chilwa.tif")
aspect= terra::rast("./assets/TIF/aspect_5arc_condt_chilwa.tif")

levels(slope) <- data.frame(ID = 1:6,
  slope_class = c("<5%", "5-10%", "10-15%", "15-20%", "20-30%", "30-100%"))
levels(aspect) <- data.frame(ID = 1:8,
  direction = c("N", "NE", "E", "SE", "S", "SW", "W", "NW"))

tmap::tmap_mode("plot")
tmap::tm_shape(dem) + 
  tmap::tm_raster(
    col.scale = tm_scale_continuous(values = terrain.colors(7)),
    col.legend = tm_legend(title = "Elevation (m)", reverse = T)) + 
  tmap::tm_shape(rivers) + tm_lines(col = "turquoise") +
  tmap::tm_shape(lakes) + tm_fill("turquoise") +
  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +
  tmap::tm_scalebar(position = c("LEFT", "BOTTOM"), text.size = 0.5) + 
  tmap::tm_compass(color.dark="gray60",position=c("top","left")) -> tm1_static

tmap::tm_shape(slope) + 
  tmap::tm_raster(
    col.scale = tm_scale(values = "viridis"), 
    col.legend=tm_legend(title="Slope (%)",reverse = T)) + 
  tmap::tm_shape(rivers) + tm_lines(col = "turquoise") +
  tmap::tm_shape(lakes) + tm_fill("turquoise") +
  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +
  tmap::tm_scalebar(position = c("LEFT", "BOTTOM"), text.size = 0.5) + 
  tmap::tm_compass(color.dark="gray60",position=c("top","left")) -> tm2_static

tmap::tm_shape(aspect) + 
  tmap::tm_raster(
    col.scale = tm_scale(values = "PiYG"), 
    col.legend=tm_legend(title="Aspect",reverse = F)) + 
  tmap::tm_shape(rivers) + tm_lines(col = "turquoise") +
  tmap::tm_shape(lakes) + tm_fill("turquoise") +
  tmap::tm_graticules(lines = T, labels.rot = c(0, 90), lwd = 0.2) +
  tmap::tm_scalebar(position = c("LEFT", "BOTTOM"), text.size = 0.5) + 
  tmap::tm_compass(color.dark="gray60",position=c("top","left")) -> tm3_static

tmap::tmap_arrange(tm1_static, tm2_static, tm3_static, nrow=1)
```

![](https://raw.githubusercontent.com/seamusrobertmurphy/map-templates/refs/heads/main/assets/MAP/elevation_chilwa_2D.png)

### Runtime Log

```{r session-info}
#| eval: true
devtools::session_info()
```

[^1]: Breach-fill algorithm by Lindsay's paper (2016)
    "Efficient hybrid breaching-filling sink removal methods
    for flow path enforcement in digital elevation models:
    Efficient Hybrid Sink Removal Methods for Flow Path
    Enforcement: (Hydrological Processes 30, 846â€“857.
    doi:10.1002/hyp.10648) -\>
    `flowdem::comp_breach_lindsay2016(dem)`
