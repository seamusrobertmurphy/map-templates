---
title: "Population Maps"
execute:
  echo: true
format:
  html:
    toc: true
    toc-location: right
    highlight-style: pygments
    page-layout: article

editor_options: 
  markdown: 
    wrap: 60
---

```{r setup}
#| warning: false
#| message: false
#| include: false
#| echo: false
#| comment: NA

#install.packages("easypackages")
easypackages::packages(
  "bslib",
  "caret", "cli", "cols4all", "covr", "cowplot",
  "dendextend", "digest", "DiagrammeR", "dtwclust", "downlit",
  "e1071", "exactextractr", "elevatr",
  "FNN", "future",
  "gdalcubes", "gdalUtilities", "geojsonsf", "geos", "ggplot2", "ggstats",
  "ggspatial", "ggmap", "ggplotify", "ggpubr", "ggrepel", "giscoR",
  "hdf5r", "httr", "httr2", "htmltools",
  "jsonlite",
  "kohonen",
  "leafem", "libgeos", "luz", "lwgeom", "leaflet", "leafgl",
  "mapedit", "mapview", "maptiles", "methods", "mgcv",
  "ncdf4", "nnet",
  "openxlsx",
  "parallel", "plotly",
  "randomForest", "rasterVis", "raster", "Rcpp", "RcppArmadillo",
  "RcppCensSpatial", "rayshader", "RcppEigen", "RcppParallel",
  "RColorBrewer", "reactable", "rgl", "rsconnect", "RStoolbox", "rts",
  "s2", "sf", "scales", "sits", "spdep", "stars", "stringr", "supercells",
  "terra", "testthat", "tidyverse", "tidyterra", "tools",
  "tmap", "tmaptools", "terrainr",
  "xgboost", prompt=T)
  
knitr::opts_chunk$set(
  echo = TRUE, message = FALSE, warning = FALSE,
  error = FALSE, comment = NA, tidy.opts = list(width.cutoff = 6)
)
options(htmltools.dir.version = FALSE, htmltools.preserve.raw = FALSE)
mapviewOptions(fgb = FALSE)
sf::sf_use_s2(use_s2 = FALSE)
```

```{css, echo=FALSE, class.source = 'foldable'}
div.column {
    display: inline-block;
    vertical-align: top;
    width: 50%;
}

#TOC::before {
  content: "";
  display: block;
  height:200px;
  width: 200px;
  background-image: url('assets/outputs/04-population-map.png');
  background-size: contain;
  background-position: 50% 50%;
  padding-top: 80px !important;
  background-repeat: no-repeat;
}
```

-   Declare aoi, extent & projection
-   Download & tidy population dataset
-   Customize layers & plot map
-   Save output & format resolution

## 1. AOIs & projection

```{r pop-aoi}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| comment: NA

crs_master <- st_crs("epsg:4326")
aoi_site   = sf::read_sf("./assets/inputs/chilwa_watershed_4326.shp") |>
  st_cast() |> st_transform(crs_master)
aoi_country <- giscoR::gisco_get_countries(country = "Malawi", resolution = "3") |>
  st_cast() |> st_transform(crs_master)
aoi_region <- giscoR::gisco_get_countries(
  country = c("Malawi", "Zambia", "Tanzania", "Mozambique"), resolution = "3") |>
  st_cast() |> st_transform(crs_master)

# Interactive map mode: "view"
tmap::tmap_mode("view")
tmap::tm_shape(aoi_region) +
  tmap::tm_borders(lwd = 1, col = "green") +
  tmap::tm_shape(aoi_country) +
  tmap::tm_borders(lwd = 2, col = "red")
```

## 2. Download population data

```{r pop-input}
#| warning: false
#| message: false
#| echo: true
#| eval: true
#| comment: NA

# best 1x1km raster format (person/km^2)
#url <- "https://jeodpp.jrc.ec.europa.eu/ftp/jrc-opendata/GHSL/GHS_POP_GLOBE_R2023A/GHS_POP_E2025_GLOBE_R2023A_54009_1000/V1-0/GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.zip"
# file_name = "GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.tif"
# download.file(url = url, path = getwd(), destfile = file_name)
pop = terra::rast("~/repos/datasets/population/GHS_POP_E2025_GLOBE_R2023A_54009_1000_V1_0.tif")
pop = terra::project(pop, "EPSG:4326") # reproject to fix NAs
pop = terra::crop(pop, aoi_country, snap = "in", mask = T)
names(pop)[1] <- "density_km" # number of persons per sq kilometer

tmap::tm_shape(aoi_country) +
  tmap::tm_borders(lwd = 0) +
  tmap::tm_shape(pop) +
  tm_raster(
    style           = "fixed",
    alpha           = 1,
    palette         = "OrRd",
    title           = "People/Km^2",
    breaks          = c(0, 0.01, 10, 100, 200, 1000, 2000, 50000)
  )
```

## 3. Customize layout

```{r pop-map}
#| eval: false
# static mapping mode
tmap::tmap_mode("plot") 

tmap::tm_shape(aoi_country) +
  tmap::tm_borders(lwd = 0) +
  tmap::tm_shape(pop) +
  tm_raster(
    style           = "fixed",
    alpha           = 1,
    palette         = "OrRd",
    title           = "People/Km^2",
    breaks          = c(0, 0.01, 10, 100, 200, 1000, 2000, 50000)
  ) +
  tmap::tm_shape(aoi_region) +
  tmap::tm_borders(lwd = 0.5, col = "black") +
  tmap::tm_shape(aoi_site) +
  tmap::tm_borders(lwd = 1, col = "red", fill_alpha = 0.5) +
  tmap::tm_graticules(
    lines           = T, 
    labels.rot      = c(0, 90), 
    lwd             = 0.2
    ) +
  tmap::tm_scalebar(
    breaks          = c(0, 50, 100, 200),
    position        = c("RIGHT", "BOTTOM"),
    text.size       = 0.5
    ) +
  tmap::tm_compass(
    type            = "4star",
    size            = 1,
    color.dark      = "gray60",
    text.color      = "gray60",
    position        = c("LEFT", "top")
    ) +
  tmap::tm_credits(
    text            = "EPSG:4326", 
    color           = "gray60",
    size            = 0.5,
    position        = c("left", "BOTTOM")
    ) +
  tmap::tm_layout(
    main.title      = "Population Density",
    title.size      = 1,
    title.position  = c("right", "top"),
    legend.outside  = FALSE,
    legend.position = c("left", "bottom"),
    legend.text.size= 0.5,
    legend.title.size = 0.5
    ) -> map_population
map_population
```

![Figure 1: Population
Map](assets/outputs/04-population-map.png)

## 4. Save output

```{r pop-save}
#| eval: false
tmap::tmap_save(map_population, "assets/outputs/04-population-map.png", asp = 0, dpi = 600)
```

```{r}
devtools::session_info()
```
